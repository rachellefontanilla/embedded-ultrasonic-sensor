
UDAR_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b10  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08005cb0  08005cb0  00015cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d54  08005d54  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005d54  08005d54  00015d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d5c  08005d5c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d5c  08005d5c  00015d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d60  08005d60  00015d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000074  08005dd8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08005dd8  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea24  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e25  00000000  00000000  0002eac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  000308f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00031628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017afa  00000000  00000000  000322a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f48c  00000000  00000000  00049da2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a1db  00000000  00000000  0005922e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3409  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cd8  00000000  00000000  000f345c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005c98 	.word	0x08005c98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005c98 	.word	0x08005c98

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2iz>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d215      	bcs.n	8000892 <__aeabi_d2iz+0x36>
 8000866:	d511      	bpl.n	800088c <__aeabi_d2iz+0x30>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d912      	bls.n	8000898 <__aeabi_d2iz+0x3c>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000882:	fa23 f002 	lsr.w	r0, r3, r2
 8000886:	bf18      	it	ne
 8000888:	4240      	negne	r0, r0
 800088a:	4770      	bx	lr
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	4770      	bx	lr
 8000892:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000896:	d105      	bne.n	80008a4 <__aeabi_d2iz+0x48>
 8000898:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800089c:	bf08      	it	eq
 800089e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295
 80008c0:	f000 b974 	b.w	8000bac <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	4604      	mov	r4, r0
 80008e4:	468e      	mov	lr, r1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d14d      	bne.n	8000986 <__udivmoddi4+0xaa>
 80008ea:	428a      	cmp	r2, r1
 80008ec:	4694      	mov	ip, r2
 80008ee:	d969      	bls.n	80009c4 <__udivmoddi4+0xe8>
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	b152      	cbz	r2, 800090c <__udivmoddi4+0x30>
 80008f6:	fa01 f302 	lsl.w	r3, r1, r2
 80008fa:	f1c2 0120 	rsb	r1, r2, #32
 80008fe:	fa20 f101 	lsr.w	r1, r0, r1
 8000902:	fa0c fc02 	lsl.w	ip, ip, r2
 8000906:	ea41 0e03 	orr.w	lr, r1, r3
 800090a:	4094      	lsls	r4, r2
 800090c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000910:	0c21      	lsrs	r1, r4, #16
 8000912:	fbbe f6f8 	udiv	r6, lr, r8
 8000916:	fa1f f78c 	uxth.w	r7, ip
 800091a:	fb08 e316 	mls	r3, r8, r6, lr
 800091e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000922:	fb06 f107 	mul.w	r1, r6, r7
 8000926:	4299      	cmp	r1, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x64>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000932:	f080 811f 	bcs.w	8000b74 <__udivmoddi4+0x298>
 8000936:	4299      	cmp	r1, r3
 8000938:	f240 811c 	bls.w	8000b74 <__udivmoddi4+0x298>
 800093c:	3e02      	subs	r6, #2
 800093e:	4463      	add	r3, ip
 8000940:	1a5b      	subs	r3, r3, r1
 8000942:	b2a4      	uxth	r4, r4
 8000944:	fbb3 f0f8 	udiv	r0, r3, r8
 8000948:	fb08 3310 	mls	r3, r8, r0, r3
 800094c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000950:	fb00 f707 	mul.w	r7, r0, r7
 8000954:	42a7      	cmp	r7, r4
 8000956:	d90a      	bls.n	800096e <__udivmoddi4+0x92>
 8000958:	eb1c 0404 	adds.w	r4, ip, r4
 800095c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000960:	f080 810a 	bcs.w	8000b78 <__udivmoddi4+0x29c>
 8000964:	42a7      	cmp	r7, r4
 8000966:	f240 8107 	bls.w	8000b78 <__udivmoddi4+0x29c>
 800096a:	4464      	add	r4, ip
 800096c:	3802      	subs	r0, #2
 800096e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000972:	1be4      	subs	r4, r4, r7
 8000974:	2600      	movs	r6, #0
 8000976:	b11d      	cbz	r5, 8000980 <__udivmoddi4+0xa4>
 8000978:	40d4      	lsrs	r4, r2
 800097a:	2300      	movs	r3, #0
 800097c:	e9c5 4300 	strd	r4, r3, [r5]
 8000980:	4631      	mov	r1, r6
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	428b      	cmp	r3, r1
 8000988:	d909      	bls.n	800099e <__udivmoddi4+0xc2>
 800098a:	2d00      	cmp	r5, #0
 800098c:	f000 80ef 	beq.w	8000b6e <__udivmoddi4+0x292>
 8000990:	2600      	movs	r6, #0
 8000992:	e9c5 0100 	strd	r0, r1, [r5]
 8000996:	4630      	mov	r0, r6
 8000998:	4631      	mov	r1, r6
 800099a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800099e:	fab3 f683 	clz	r6, r3
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	d14a      	bne.n	8000a3c <__udivmoddi4+0x160>
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d302      	bcc.n	80009b0 <__udivmoddi4+0xd4>
 80009aa:	4282      	cmp	r2, r0
 80009ac:	f200 80f9 	bhi.w	8000ba2 <__udivmoddi4+0x2c6>
 80009b0:	1a84      	subs	r4, r0, r2
 80009b2:	eb61 0303 	sbc.w	r3, r1, r3
 80009b6:	2001      	movs	r0, #1
 80009b8:	469e      	mov	lr, r3
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d0e0      	beq.n	8000980 <__udivmoddi4+0xa4>
 80009be:	e9c5 4e00 	strd	r4, lr, [r5]
 80009c2:	e7dd      	b.n	8000980 <__udivmoddi4+0xa4>
 80009c4:	b902      	cbnz	r2, 80009c8 <__udivmoddi4+0xec>
 80009c6:	deff      	udf	#255	; 0xff
 80009c8:	fab2 f282 	clz	r2, r2
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	f040 8092 	bne.w	8000af6 <__udivmoddi4+0x21a>
 80009d2:	eba1 010c 	sub.w	r1, r1, ip
 80009d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009da:	fa1f fe8c 	uxth.w	lr, ip
 80009de:	2601      	movs	r6, #1
 80009e0:	0c20      	lsrs	r0, r4, #16
 80009e2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009e6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ee:	fb0e f003 	mul.w	r0, lr, r3
 80009f2:	4288      	cmp	r0, r1
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x12c>
 80009f6:	eb1c 0101 	adds.w	r1, ip, r1
 80009fa:	f103 38ff 	add.w	r8, r3, #4294967295
 80009fe:	d202      	bcs.n	8000a06 <__udivmoddi4+0x12a>
 8000a00:	4288      	cmp	r0, r1
 8000a02:	f200 80cb 	bhi.w	8000b9c <__udivmoddi4+0x2c0>
 8000a06:	4643      	mov	r3, r8
 8000a08:	1a09      	subs	r1, r1, r0
 8000a0a:	b2a4      	uxth	r4, r4
 8000a0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a10:	fb07 1110 	mls	r1, r7, r0, r1
 8000a14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a18:	fb0e fe00 	mul.w	lr, lr, r0
 8000a1c:	45a6      	cmp	lr, r4
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x156>
 8000a20:	eb1c 0404 	adds.w	r4, ip, r4
 8000a24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a28:	d202      	bcs.n	8000a30 <__udivmoddi4+0x154>
 8000a2a:	45a6      	cmp	lr, r4
 8000a2c:	f200 80bb 	bhi.w	8000ba6 <__udivmoddi4+0x2ca>
 8000a30:	4608      	mov	r0, r1
 8000a32:	eba4 040e 	sub.w	r4, r4, lr
 8000a36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a3a:	e79c      	b.n	8000976 <__udivmoddi4+0x9a>
 8000a3c:	f1c6 0720 	rsb	r7, r6, #32
 8000a40:	40b3      	lsls	r3, r6
 8000a42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a52:	431c      	orrs	r4, r3
 8000a54:	40f9      	lsrs	r1, r7
 8000a56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a62:	0c20      	lsrs	r0, r4, #16
 8000a64:	fa1f fe8c 	uxth.w	lr, ip
 8000a68:	fb09 1118 	mls	r1, r9, r8, r1
 8000a6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a70:	fb08 f00e 	mul.w	r0, r8, lr
 8000a74:	4288      	cmp	r0, r1
 8000a76:	fa02 f206 	lsl.w	r2, r2, r6
 8000a7a:	d90b      	bls.n	8000a94 <__udivmoddi4+0x1b8>
 8000a7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a84:	f080 8088 	bcs.w	8000b98 <__udivmoddi4+0x2bc>
 8000a88:	4288      	cmp	r0, r1
 8000a8a:	f240 8085 	bls.w	8000b98 <__udivmoddi4+0x2bc>
 8000a8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a92:	4461      	add	r1, ip
 8000a94:	1a09      	subs	r1, r1, r0
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000aa0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	458e      	cmp	lr, r1
 8000aaa:	d908      	bls.n	8000abe <__udivmoddi4+0x1e2>
 8000aac:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ab4:	d26c      	bcs.n	8000b90 <__udivmoddi4+0x2b4>
 8000ab6:	458e      	cmp	lr, r1
 8000ab8:	d96a      	bls.n	8000b90 <__udivmoddi4+0x2b4>
 8000aba:	3802      	subs	r0, #2
 8000abc:	4461      	add	r1, ip
 8000abe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ac2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ac6:	eba1 010e 	sub.w	r1, r1, lr
 8000aca:	42a1      	cmp	r1, r4
 8000acc:	46c8      	mov	r8, r9
 8000ace:	46a6      	mov	lr, r4
 8000ad0:	d356      	bcc.n	8000b80 <__udivmoddi4+0x2a4>
 8000ad2:	d053      	beq.n	8000b7c <__udivmoddi4+0x2a0>
 8000ad4:	b15d      	cbz	r5, 8000aee <__udivmoddi4+0x212>
 8000ad6:	ebb3 0208 	subs.w	r2, r3, r8
 8000ada:	eb61 010e 	sbc.w	r1, r1, lr
 8000ade:	fa01 f707 	lsl.w	r7, r1, r7
 8000ae2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ae6:	40f1      	lsrs	r1, r6
 8000ae8:	431f      	orrs	r7, r3
 8000aea:	e9c5 7100 	strd	r7, r1, [r5]
 8000aee:	2600      	movs	r6, #0
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	40d8      	lsrs	r0, r3
 8000afc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b00:	fa21 f303 	lsr.w	r3, r1, r3
 8000b04:	4091      	lsls	r1, r2
 8000b06:	4301      	orrs	r1, r0
 8000b08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0c:	fa1f fe8c 	uxth.w	lr, ip
 8000b10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b14:	fb07 3610 	mls	r6, r7, r0, r3
 8000b18:	0c0b      	lsrs	r3, r1, #16
 8000b1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b22:	429e      	cmp	r6, r3
 8000b24:	fa04 f402 	lsl.w	r4, r4, r2
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x260>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b32:	d22f      	bcs.n	8000b94 <__udivmoddi4+0x2b8>
 8000b34:	429e      	cmp	r6, r3
 8000b36:	d92d      	bls.n	8000b94 <__udivmoddi4+0x2b8>
 8000b38:	3802      	subs	r0, #2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	1b9b      	subs	r3, r3, r6
 8000b3e:	b289      	uxth	r1, r1
 8000b40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b44:	fb07 3316 	mls	r3, r7, r6, r3
 8000b48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b50:	428b      	cmp	r3, r1
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x28a>
 8000b54:	eb1c 0101 	adds.w	r1, ip, r1
 8000b58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b5c:	d216      	bcs.n	8000b8c <__udivmoddi4+0x2b0>
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d914      	bls.n	8000b8c <__udivmoddi4+0x2b0>
 8000b62:	3e02      	subs	r6, #2
 8000b64:	4461      	add	r1, ip
 8000b66:	1ac9      	subs	r1, r1, r3
 8000b68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b6c:	e738      	b.n	80009e0 <__udivmoddi4+0x104>
 8000b6e:	462e      	mov	r6, r5
 8000b70:	4628      	mov	r0, r5
 8000b72:	e705      	b.n	8000980 <__udivmoddi4+0xa4>
 8000b74:	4606      	mov	r6, r0
 8000b76:	e6e3      	b.n	8000940 <__udivmoddi4+0x64>
 8000b78:	4618      	mov	r0, r3
 8000b7a:	e6f8      	b.n	800096e <__udivmoddi4+0x92>
 8000b7c:	454b      	cmp	r3, r9
 8000b7e:	d2a9      	bcs.n	8000ad4 <__udivmoddi4+0x1f8>
 8000b80:	ebb9 0802 	subs.w	r8, r9, r2
 8000b84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b88:	3801      	subs	r0, #1
 8000b8a:	e7a3      	b.n	8000ad4 <__udivmoddi4+0x1f8>
 8000b8c:	4646      	mov	r6, r8
 8000b8e:	e7ea      	b.n	8000b66 <__udivmoddi4+0x28a>
 8000b90:	4620      	mov	r0, r4
 8000b92:	e794      	b.n	8000abe <__udivmoddi4+0x1e2>
 8000b94:	4640      	mov	r0, r8
 8000b96:	e7d1      	b.n	8000b3c <__udivmoddi4+0x260>
 8000b98:	46d0      	mov	r8, sl
 8000b9a:	e77b      	b.n	8000a94 <__udivmoddi4+0x1b8>
 8000b9c:	3b02      	subs	r3, #2
 8000b9e:	4461      	add	r1, ip
 8000ba0:	e732      	b.n	8000a08 <__udivmoddi4+0x12c>
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	e709      	b.n	80009ba <__udivmoddi4+0xde>
 8000ba6:	4464      	add	r4, ip
 8000ba8:	3802      	subs	r0, #2
 8000baa:	e742      	b.n	8000a32 <__udivmoddi4+0x156>

08000bac <__aeabi_idiv0>:
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <ADC_Select_CH>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t rcv_intpt_flag = 0;
static void ADC_Select_CH(int CH) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
	switch (CH) {
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	f200 814b 	bhi.w	8000e64 <ADC_Select_CH+0x2b4>
 8000bce:	a201      	add	r2, pc, #4	; (adr r2, 8000bd4 <ADC_Select_CH+0x24>)
 8000bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd4:	08000c15 	.word	0x08000c15
 8000bd8:	08000c37 	.word	0x08000c37
 8000bdc:	08000c59 	.word	0x08000c59
 8000be0:	08000c7b 	.word	0x08000c7b
 8000be4:	08000c9d 	.word	0x08000c9d
 8000be8:	08000cbf 	.word	0x08000cbf
 8000bec:	08000ce1 	.word	0x08000ce1
 8000bf0:	08000d03 	.word	0x08000d03
 8000bf4:	08000d25 	.word	0x08000d25
 8000bf8:	08000d47 	.word	0x08000d47
 8000bfc:	08000d67 	.word	0x08000d67
 8000c00:	08000d87 	.word	0x08000d87
 8000c04:	08000da7 	.word	0x08000da7
 8000c08:	08000dc7 	.word	0x08000dc7
 8000c0c:	08000de7 	.word	0x08000de7
 8000c10:	08000e07 	.word	0x08000e07
	case 0:
		sConfig.Channel = ADC_CHANNEL_0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000c1c:	f107 0308 	add.w	r3, r7, #8
 8000c20:	4619      	mov	r1, r3
 8000c22:	4892      	ldr	r0, [pc, #584]	; (8000e6c <ADC_Select_CH+0x2bc>)
 8000c24:	f001 fa88 	bl	8002138 <HAL_ADC_ConfigChannel>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f000 80fb 	beq.w	8000e26 <ADC_Select_CH+0x276>
			Error_Handler();
 8000c30:	f000 fdde 	bl	80017f0 <Error_Handler>
		}
		break;
 8000c34:	e0f7      	b.n	8000e26 <ADC_Select_CH+0x276>
	case 1:
		sConfig.Channel = ADC_CHANNEL_1;
 8000c36:	2301      	movs	r3, #1
 8000c38:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	4619      	mov	r1, r3
 8000c44:	4889      	ldr	r0, [pc, #548]	; (8000e6c <ADC_Select_CH+0x2bc>)
 8000c46:	f001 fa77 	bl	8002138 <HAL_ADC_ConfigChannel>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	f000 80ec 	beq.w	8000e2a <ADC_Select_CH+0x27a>
			Error_Handler();
 8000c52:	f000 fdcd 	bl	80017f0 <Error_Handler>
		}
		break;
 8000c56:	e0e8      	b.n	8000e2a <ADC_Select_CH+0x27a>
	case 2:
		sConfig.Channel = ADC_CHANNEL_2;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	4619      	mov	r1, r3
 8000c66:	4881      	ldr	r0, [pc, #516]	; (8000e6c <ADC_Select_CH+0x2bc>)
 8000c68:	f001 fa66 	bl	8002138 <HAL_ADC_ConfigChannel>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 80dd 	beq.w	8000e2e <ADC_Select_CH+0x27e>
			Error_Handler();
 8000c74:	f000 fdbc 	bl	80017f0 <Error_Handler>
		}
		break;
 8000c78:	e0d9      	b.n	8000e2e <ADC_Select_CH+0x27e>
	case 3:
		sConfig.Channel = ADC_CHANNEL_3;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	4619      	mov	r1, r3
 8000c88:	4878      	ldr	r0, [pc, #480]	; (8000e6c <ADC_Select_CH+0x2bc>)
 8000c8a:	f001 fa55 	bl	8002138 <HAL_ADC_ConfigChannel>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f000 80ce 	beq.w	8000e32 <ADC_Select_CH+0x282>
			Error_Handler();
 8000c96:	f000 fdab 	bl	80017f0 <Error_Handler>
		}
		break;
 8000c9a:	e0ca      	b.n	8000e32 <ADC_Select_CH+0x282>
	case 4:
		sConfig.Channel = ADC_CHANNEL_4;
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000ca4:	f107 0308 	add.w	r3, r7, #8
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4870      	ldr	r0, [pc, #448]	; (8000e6c <ADC_Select_CH+0x2bc>)
 8000cac:	f001 fa44 	bl	8002138 <HAL_ADC_ConfigChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f000 80bf 	beq.w	8000e36 <ADC_Select_CH+0x286>
			Error_Handler();
 8000cb8:	f000 fd9a 	bl	80017f0 <Error_Handler>
		}
		break;
 8000cbc:	e0bb      	b.n	8000e36 <ADC_Select_CH+0x286>
	case 5:
		sConfig.Channel = ADC_CHANNEL_5;
 8000cbe:	2305      	movs	r3, #5
 8000cc0:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4867      	ldr	r0, [pc, #412]	; (8000e6c <ADC_Select_CH+0x2bc>)
 8000cce:	f001 fa33 	bl	8002138 <HAL_ADC_ConfigChannel>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f000 80b0 	beq.w	8000e3a <ADC_Select_CH+0x28a>
			Error_Handler();
 8000cda:	f000 fd89 	bl	80017f0 <Error_Handler>
		}
		break;
 8000cde:	e0ac      	b.n	8000e3a <ADC_Select_CH+0x28a>
	case 6:
		sConfig.Channel = ADC_CHANNEL_6;
 8000ce0:	2306      	movs	r3, #6
 8000ce2:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000ce8:	f107 0308 	add.w	r3, r7, #8
 8000cec:	4619      	mov	r1, r3
 8000cee:	485f      	ldr	r0, [pc, #380]	; (8000e6c <ADC_Select_CH+0x2bc>)
 8000cf0:	f001 fa22 	bl	8002138 <HAL_ADC_ConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f000 80a1 	beq.w	8000e3e <ADC_Select_CH+0x28e>
			Error_Handler();
 8000cfc:	f000 fd78 	bl	80017f0 <Error_Handler>
		}
		break;
 8000d00:	e09d      	b.n	8000e3e <ADC_Select_CH+0x28e>
	case 7:
		sConfig.Channel = ADC_CHANNEL_7;
 8000d02:	2307      	movs	r3, #7
 8000d04:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8000d06:	2301      	movs	r3, #1
 8000d08:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4856      	ldr	r0, [pc, #344]	; (8000e6c <ADC_Select_CH+0x2bc>)
 8000d12:	f001 fa11 	bl	8002138 <HAL_ADC_ConfigChannel>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f000 8092 	beq.w	8000e42 <ADC_Select_CH+0x292>
			Error_Handler();
 8000d1e:	f000 fd67 	bl	80017f0 <Error_Handler>
		}
		break;
 8000d22:	e08e      	b.n	8000e42 <ADC_Select_CH+0x292>
	case 8:
		sConfig.Channel = ADC_CHANNEL_8;
 8000d24:	2308      	movs	r3, #8
 8000d26:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	4619      	mov	r1, r3
 8000d32:	484e      	ldr	r0, [pc, #312]	; (8000e6c <ADC_Select_CH+0x2bc>)
 8000d34:	f001 fa00 	bl	8002138 <HAL_ADC_ConfigChannel>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 8083 	beq.w	8000e46 <ADC_Select_CH+0x296>
			Error_Handler();
 8000d40:	f000 fd56 	bl	80017f0 <Error_Handler>
		}
		break;
 8000d44:	e07f      	b.n	8000e46 <ADC_Select_CH+0x296>
	case 9:
		sConfig.Channel = ADC_CHANNEL_9;
 8000d46:	2309      	movs	r3, #9
 8000d48:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d4e:	f107 0308 	add.w	r3, r7, #8
 8000d52:	4619      	mov	r1, r3
 8000d54:	4845      	ldr	r0, [pc, #276]	; (8000e6c <ADC_Select_CH+0x2bc>)
 8000d56:	f001 f9ef 	bl	8002138 <HAL_ADC_ConfigChannel>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d074      	beq.n	8000e4a <ADC_Select_CH+0x29a>
			Error_Handler();
 8000d60:	f000 fd46 	bl	80017f0 <Error_Handler>
		}
		break;
 8000d64:	e071      	b.n	8000e4a <ADC_Select_CH+0x29a>
	case 10:
		sConfig.Channel = ADC_CHANNEL_10;
 8000d66:	230a      	movs	r3, #10
 8000d68:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d6e:	f107 0308 	add.w	r3, r7, #8
 8000d72:	4619      	mov	r1, r3
 8000d74:	483d      	ldr	r0, [pc, #244]	; (8000e6c <ADC_Select_CH+0x2bc>)
 8000d76:	f001 f9df 	bl	8002138 <HAL_ADC_ConfigChannel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d066      	beq.n	8000e4e <ADC_Select_CH+0x29e>
			Error_Handler();
 8000d80:	f000 fd36 	bl	80017f0 <Error_Handler>
		}
		break;
 8000d84:	e063      	b.n	8000e4e <ADC_Select_CH+0x29e>
	case 11:
		sConfig.Channel = ADC_CHANNEL_11;
 8000d86:	230b      	movs	r3, #11
 8000d88:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d8e:	f107 0308 	add.w	r3, r7, #8
 8000d92:	4619      	mov	r1, r3
 8000d94:	4835      	ldr	r0, [pc, #212]	; (8000e6c <ADC_Select_CH+0x2bc>)
 8000d96:	f001 f9cf 	bl	8002138 <HAL_ADC_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d058      	beq.n	8000e52 <ADC_Select_CH+0x2a2>
			Error_Handler();
 8000da0:	f000 fd26 	bl	80017f0 <Error_Handler>
		}
		break;
 8000da4:	e055      	b.n	8000e52 <ADC_Select_CH+0x2a2>
	case 12:
		sConfig.Channel = ADC_CHANNEL_12;
 8000da6:	230c      	movs	r3, #12
 8000da8:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8000daa:	2301      	movs	r3, #1
 8000dac:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	4619      	mov	r1, r3
 8000db4:	482d      	ldr	r0, [pc, #180]	; (8000e6c <ADC_Select_CH+0x2bc>)
 8000db6:	f001 f9bf 	bl	8002138 <HAL_ADC_ConfigChannel>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d04a      	beq.n	8000e56 <ADC_Select_CH+0x2a6>
			Error_Handler();
 8000dc0:	f000 fd16 	bl	80017f0 <Error_Handler>
		}
		break;
 8000dc4:	e047      	b.n	8000e56 <ADC_Select_CH+0x2a6>
	case 13:
		sConfig.Channel = ADC_CHANNEL_13;
 8000dc6:	230d      	movs	r3, #13
 8000dc8:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4825      	ldr	r0, [pc, #148]	; (8000e6c <ADC_Select_CH+0x2bc>)
 8000dd6:	f001 f9af 	bl	8002138 <HAL_ADC_ConfigChannel>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d03c      	beq.n	8000e5a <ADC_Select_CH+0x2aa>
			Error_Handler();
 8000de0:	f000 fd06 	bl	80017f0 <Error_Handler>
		}
		break;
 8000de4:	e039      	b.n	8000e5a <ADC_Select_CH+0x2aa>
	case 14:
		sConfig.Channel = ADC_CHANNEL_14;
 8000de6:	230e      	movs	r3, #14
 8000de8:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8000dea:	2301      	movs	r3, #1
 8000dec:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	4619      	mov	r1, r3
 8000df4:	481d      	ldr	r0, [pc, #116]	; (8000e6c <ADC_Select_CH+0x2bc>)
 8000df6:	f001 f99f 	bl	8002138 <HAL_ADC_ConfigChannel>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d02e      	beq.n	8000e5e <ADC_Select_CH+0x2ae>
			Error_Handler();
 8000e00:	f000 fcf6 	bl	80017f0 <Error_Handler>
		}
		break;
 8000e04:	e02b      	b.n	8000e5e <ADC_Select_CH+0x2ae>
	case 15:
		sConfig.Channel = ADC_CHANNEL_15;
 8000e06:	230f      	movs	r3, #15
 8000e08:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e0e:	f107 0308 	add.w	r3, r7, #8
 8000e12:	4619      	mov	r1, r3
 8000e14:	4815      	ldr	r0, [pc, #84]	; (8000e6c <ADC_Select_CH+0x2bc>)
 8000e16:	f001 f98f 	bl	8002138 <HAL_ADC_ConfigChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d020      	beq.n	8000e62 <ADC_Select_CH+0x2b2>
			Error_Handler();
 8000e20:	f000 fce6 	bl	80017f0 <Error_Handler>
		}
		break;
 8000e24:	e01d      	b.n	8000e62 <ADC_Select_CH+0x2b2>
		break;
 8000e26:	bf00      	nop
 8000e28:	e01c      	b.n	8000e64 <ADC_Select_CH+0x2b4>
		break;
 8000e2a:	bf00      	nop
 8000e2c:	e01a      	b.n	8000e64 <ADC_Select_CH+0x2b4>
		break;
 8000e2e:	bf00      	nop
 8000e30:	e018      	b.n	8000e64 <ADC_Select_CH+0x2b4>
		break;
 8000e32:	bf00      	nop
 8000e34:	e016      	b.n	8000e64 <ADC_Select_CH+0x2b4>
		break;
 8000e36:	bf00      	nop
 8000e38:	e014      	b.n	8000e64 <ADC_Select_CH+0x2b4>
		break;
 8000e3a:	bf00      	nop
 8000e3c:	e012      	b.n	8000e64 <ADC_Select_CH+0x2b4>
		break;
 8000e3e:	bf00      	nop
 8000e40:	e010      	b.n	8000e64 <ADC_Select_CH+0x2b4>
		break;
 8000e42:	bf00      	nop
 8000e44:	e00e      	b.n	8000e64 <ADC_Select_CH+0x2b4>
		break;
 8000e46:	bf00      	nop
 8000e48:	e00c      	b.n	8000e64 <ADC_Select_CH+0x2b4>
		break;
 8000e4a:	bf00      	nop
 8000e4c:	e00a      	b.n	8000e64 <ADC_Select_CH+0x2b4>
		break;
 8000e4e:	bf00      	nop
 8000e50:	e008      	b.n	8000e64 <ADC_Select_CH+0x2b4>
		break;
 8000e52:	bf00      	nop
 8000e54:	e006      	b.n	8000e64 <ADC_Select_CH+0x2b4>
		break;
 8000e56:	bf00      	nop
 8000e58:	e004      	b.n	8000e64 <ADC_Select_CH+0x2b4>
		break;
 8000e5a:	bf00      	nop
 8000e5c:	e002      	b.n	8000e64 <ADC_Select_CH+0x2b4>
		break;
 8000e5e:	bf00      	nop
 8000e60:	e000      	b.n	8000e64 <ADC_Select_CH+0x2b4>
		break;
 8000e62:	bf00      	nop
	}
}
 8000e64:	bf00      	nop
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200000d4 	.word	0x200000d4

08000e70 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08c      	sub	sp, #48	; 0x30
 8000e74:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e76:	f000 ff05 	bl	8001c84 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e7a:	f000 fa63 	bl	8001344 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e7e:	f000 fc15 	bl	80016ac <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000e82:	f000 fbbf 	bl	8001604 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8000e86:	f000 fb93 	bl	80015b0 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 8000e8a:	f000 fbe5 	bl	8001658 <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8000e8e:	f000 fab7 	bl	8001400 <MX_ADC1_Init>
	MX_TIM3_Init();
 8000e92:	f000 fb07 	bl	80014a4 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	int TIM3_Ch1_DCVAL = 1500;
 8000e96:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
	int TIM3_Ch2_DCVAL = 1500;
 8000e9c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000ea0:	623b      	str	r3, [r7, #32]
	HAL_TIM_Base_Start(&htim3);
 8000ea2:	488f      	ldr	r0, [pc, #572]	; (80010e0 <main+0x270>)
 8000ea4:	f002 fbb8 	bl	8003618 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	488d      	ldr	r0, [pc, #564]	; (80010e0 <main+0x270>)
 8000eac:	f002 fc68 	bl	8003780 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000eb0:	2104      	movs	r1, #4
 8000eb2:	488b      	ldr	r0, [pc, #556]	; (80010e0 <main+0x270>)
 8000eb4:	f002 fc64 	bl	8003780 <HAL_TIM_PWM_Start>
	TIM3->PSC = 16 - 1;
 8000eb8:	4b8a      	ldr	r3, [pc, #552]	; (80010e4 <main+0x274>)
 8000eba:	220f      	movs	r2, #15
 8000ebc:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 20000 - 1;
 8000ebe:	4b89      	ldr	r3, [pc, #548]	; (80010e4 <main+0x274>)
 8000ec0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000ec4:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = TIM3_Ch1_DCVAL;
 8000ec6:	4a87      	ldr	r2, [pc, #540]	; (80010e4 <main+0x274>)
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	6353      	str	r3, [r2, #52]	; 0x34
	TIM3->CCR2 = TIM3_Ch1_DCVAL;
 8000ecc:	4a85      	ldr	r2, [pc, #532]	; (80010e4 <main+0x274>)
 8000ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed0:	6393      	str	r3, [r2, #56]	; 0x38
	int mode = 0; // 0 auto, 1 manual
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]

	int object_count = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
	int degree_to_center = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
	int angular_width = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
	int pov = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	TIM3_Ch1_DCVAL = (1500);
 8000ee6:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
	TIM3_Ch2_DCVAL = (500);
 8000eec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ef0:	623b      	str	r3, [r7, #32]
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		// AUTO
		mode = HAL_GPIO_ReadPin(GPIOC, B1_Pin);
 8000ef2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef6:	487c      	ldr	r0, [pc, #496]	; (80010e8 <main+0x278>)
 8000ef8:	f001 fe74 	bl	8002be4 <HAL_GPIO_ReadPin>
 8000efc:	4603      	mov	r3, r0
 8000efe:	617b      	str	r3, [r7, #20]

		if (mode == 1) {
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	f040 810c 	bne.w	8001120 <main+0x2b0>
			TIM3->CCR1 = TIM3_Ch1_DCVAL;
 8000f08:	4a76      	ldr	r2, [pc, #472]	; (80010e4 <main+0x274>)
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0c:	6353      	str	r3, [r2, #52]	; 0x34
			TIM3->CCR2 = TIM3_Ch2_DCVAL;
 8000f0e:	4a75      	ldr	r2, [pc, #468]	; (80010e4 <main+0x274>)
 8000f10:	6a3b      	ldr	r3, [r7, #32]
 8000f12:	6393      	str	r3, [r2, #56]	; 0x38

			while (TIM3_Ch2_DCVAL <= 2500) {
 8000f14:	e0d3      	b.n	80010be <main+0x24e>
				if (distance > 1000) {	// No object detected
 8000f16:	4b75      	ldr	r3, [pc, #468]	; (80010ec <main+0x27c>)
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f20:	f240 8086 	bls.w	8001030 <main+0x1c0>
					HAL_GPIO_WritePin(GPIOB, BLUE_Pin | GREEN_Pin | RED_Pin,
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000f2a:	4871      	ldr	r0, [pc, #452]	; (80010f0 <main+0x280>)
 8000f2c:	f001 fe72 	bl	8002c14 <HAL_GPIO_WritePin>
							GPIO_PIN_RESET);
					HAL_GPIO_WritePin(GPIOB, GREEN_Pin, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f36:	486e      	ldr	r0, [pc, #440]	; (80010f0 <main+0x280>)
 8000f38:	f001 fe6c 	bl	8002c14 <HAL_GPIO_WritePin>
					if (take_measure == 1) {	// FLAG that makes it read once
 8000f3c:	4b6d      	ldr	r3, [pc, #436]	; (80010f4 <main+0x284>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d172      	bne.n	800102a <main+0x1ba>
						second = TIM3_Ch2_DCVAL;
 8000f44:	4a6c      	ldr	r2, [pc, #432]	; (80010f8 <main+0x288>)
 8000f46:	6a3b      	ldr	r3, [r7, #32]
 8000f48:	6013      	str	r3, [r2, #0]
						TIM3->CCR2 = (first + second) / 2;
 8000f4a:	4b6c      	ldr	r3, [pc, #432]	; (80010fc <main+0x28c>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	4b6a      	ldr	r3, [pc, #424]	; (80010f8 <main+0x288>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	0fda      	lsrs	r2, r3, #31
 8000f56:	4413      	add	r3, r2
 8000f58:	105b      	asrs	r3, r3, #1
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b61      	ldr	r3, [pc, #388]	; (80010e4 <main+0x274>)
 8000f5e:	639a      	str	r2, [r3, #56]	; 0x38
						object_count++;
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	3301      	adds	r3, #1
 8000f64:	61fb      	str	r3, [r7, #28]
						// SET UP LASER, have a for loop 0 -> 3
						// Turn laser on wait 250 turn off wait 250
						// can get rid of that delasy

						int w = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
						for (w; w < 3; w++) {
 8000f6a:	e014      	b.n	8000f96 <main+0x126>
							HAL_GPIO_WritePin(LASERn_GPIO_Port, LASERn_Pin,
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f72:	485f      	ldr	r0, [pc, #380]	; (80010f0 <main+0x280>)
 8000f74:	f001 fe4e 	bl	8002c14 <HAL_GPIO_WritePin>
									GPIO_PIN_RESET);
							HAL_Delay(200);
 8000f78:	20c8      	movs	r0, #200	; 0xc8
 8000f7a:	f000 fef5 	bl	8001d68 <HAL_Delay>
							HAL_GPIO_WritePin(LASERn_GPIO_Port, LASERn_Pin,
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f84:	485a      	ldr	r0, [pc, #360]	; (80010f0 <main+0x280>)
 8000f86:	f001 fe45 	bl	8002c14 <HAL_GPIO_WritePin>
									GPIO_PIN_SET);
							HAL_Delay(200);
 8000f8a:	20c8      	movs	r0, #200	; 0xc8
 8000f8c:	f000 feec 	bl	8001d68 <HAL_Delay>
						for (w; w < 3; w++) {
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	3301      	adds	r3, #1
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	dde7      	ble.n	8000f6c <main+0xfc>
						}

						//setting the right values for the print statement
						degree_to_center = ((((first + second) / 2) / 20) * 1.8)
 8000f9c:	4b57      	ldr	r3, [pc, #348]	; (80010fc <main+0x28c>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b55      	ldr	r3, [pc, #340]	; (80010f8 <main+0x288>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a56      	ldr	r2, [pc, #344]	; (8001100 <main+0x290>)
 8000fa8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fac:	1112      	asrs	r2, r2, #4
 8000fae:	17db      	asrs	r3, r3, #31
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fbe8 	bl	8000788 <__aeabi_i2d>
 8000fb8:	a345      	add	r3, pc, #276	; (adr r3, 80010d0 <main+0x260>)
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	f7ff f967 	bl	8000290 <__aeabi_dmul>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
								- 135;
 8000fca:	a343      	add	r3, pc, #268	; (adr r3, 80010d8 <main+0x268>)
 8000fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd0:	f7ff fa8c 	bl	80004ec <__aeabi_dsub>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
						degree_to_center = ((((first + second) / 2) / 20) * 1.8)
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f7ff fc3e 	bl	800085c <__aeabi_d2iz>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	613b      	str	r3, [r7, #16]
						pov = 1900 - 1140 - 211;
 8000fe4:	f240 2325 	movw	r3, #549	; 0x225
 8000fe8:	60bb      	str	r3, [r7, #8]
						angular_width = second - first - pov;
 8000fea:	4b43      	ldr	r3, [pc, #268]	; (80010f8 <main+0x288>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	4b43      	ldr	r3, [pc, #268]	; (80010fc <main+0x28c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	1ad2      	subs	r2, r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	60fb      	str	r3, [r7, #12]

						//printing the values
						sprintf((char*) msg_buffer,
 8000ffa:	4b3c      	ldr	r3, [pc, #240]	; (80010ec <main+0x27c>)
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	461a      	mov	r2, r3
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	9200      	str	r2, [sp, #0]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	69fa      	ldr	r2, [r7, #28]
 800100c:	493d      	ldr	r1, [pc, #244]	; (8001104 <main+0x294>)
 800100e:	483e      	ldr	r0, [pc, #248]	; (8001108 <main+0x298>)
 8001010:	f004 f9d4 	bl	80053bc <siprintf>
								"\r\n Object #:%d  Degree:%d  Distance:%d  Angular-Width:%d\n",
								object_count, degree_to_center, distance,
								angular_width);
						HAL_UART_Transmit(&huart6, msg_buffer,
								strlen((char*) msg_buffer), 500);
 8001014:	483c      	ldr	r0, [pc, #240]	; (8001108 <main+0x298>)
 8001016:	f7ff f8e3 	bl	80001e0 <strlen>
 800101a:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart6, msg_buffer,
 800101c:	b29a      	uxth	r2, r3
 800101e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001022:	4939      	ldr	r1, [pc, #228]	; (8001108 <main+0x298>)
 8001024:	4839      	ldr	r0, [pc, #228]	; (800110c <main+0x29c>)
 8001026:	f003 f96c 	bl	8004302 <HAL_UART_Transmit>
					}
					take_measure = 0;
 800102a:	4b32      	ldr	r3, [pc, #200]	; (80010f4 <main+0x284>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
				}
				TIM3_Ch2_DCVAL += 20;
 8001030:	6a3b      	ldr	r3, [r7, #32]
 8001032:	3314      	adds	r3, #20
 8001034:	623b      	str	r3, [r7, #32]
				HAL_Delay(200);
 8001036:	20c8      	movs	r0, #200	; 0xc8
 8001038:	f000 fe96 	bl	8001d68 <HAL_Delay>
				TIM3->CCR2 = TIM3_Ch2_DCVAL;
 800103c:	4a29      	ldr	r2, [pc, #164]	; (80010e4 <main+0x274>)
 800103e:	6a3b      	ldr	r3, [r7, #32]
 8001040:	6393      	str	r3, [r2, #56]	; 0x38
				HAL_UART_Receive_IT(&huart1, &byte, 2);
 8001042:	2202      	movs	r2, #2
 8001044:	4932      	ldr	r1, [pc, #200]	; (8001110 <main+0x2a0>)
 8001046:	4833      	ldr	r0, [pc, #204]	; (8001114 <main+0x2a4>)
 8001048:	f003 f9ed 	bl	8004426 <HAL_UART_Receive_IT>
				HAL_UART_Transmit(&huart1, &test, 1, 500);
 800104c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001050:	2201      	movs	r2, #1
 8001052:	4931      	ldr	r1, [pc, #196]	; (8001118 <main+0x2a8>)
 8001054:	482f      	ldr	r0, [pc, #188]	; (8001114 <main+0x2a4>)
 8001056:	f003 f954 	bl	8004302 <HAL_UART_Transmit>
				while (rcv_intpt_flag == (00)) {
 800105a:	bf00      	nop
 800105c:	4b2f      	ldr	r3, [pc, #188]	; (800111c <main+0x2ac>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0fb      	beq.n	800105c <main+0x1ec>
				};
				distance = (byte[0] << 8) + byte[1];
 8001064:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <main+0x2a0>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	b29b      	uxth	r3, r3
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	b29a      	uxth	r2, r3
 8001070:	4b27      	ldr	r3, [pc, #156]	; (8001110 <main+0x2a0>)
 8001072:	785b      	ldrb	r3, [r3, #1]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	b29b      	uxth	r3, r3
 8001078:	4413      	add	r3, r2
 800107a:	b29a      	uxth	r2, r3
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <main+0x27c>)
 800107e:	801a      	strh	r2, [r3, #0]

				if (distance < 1000) {	// object sensed
 8001080:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <main+0x27c>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	b29b      	uxth	r3, r3
 8001086:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800108a:	d215      	bcs.n	80010b8 <main+0x248>
					HAL_GPIO_WritePin(GPIOB, BLUE_Pin | GREEN_Pin | RED_Pin,
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001092:	4817      	ldr	r0, [pc, #92]	; (80010f0 <main+0x280>)
 8001094:	f001 fdbe 	bl	8002c14 <HAL_GPIO_WritePin>
							GPIO_PIN_RESET);
					HAL_GPIO_WritePin(GPIOB, RED_Pin, GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800109e:	4814      	ldr	r0, [pc, #80]	; (80010f0 <main+0x280>)
 80010a0:	f001 fdb8 	bl	8002c14 <HAL_GPIO_WritePin>

					if (take_measure == 0) {	// FLAG that makes it read once
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <main+0x284>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <main+0x242>
						first = TIM3_Ch2_DCVAL;
 80010ac:	4a13      	ldr	r2, [pc, #76]	; (80010fc <main+0x28c>)
 80010ae:	6a3b      	ldr	r3, [r7, #32]
 80010b0:	6013      	str	r3, [r2, #0]
					}
					take_measure = 1;
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <main+0x284>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	601a      	str	r2, [r3, #0]
				}

				rcv_intpt_flag = 00;
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <main+0x2ac>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
			while (TIM3_Ch2_DCVAL <= 2500) {
 80010be:	6a3b      	ldr	r3, [r7, #32]
 80010c0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80010c4:	4293      	cmp	r3, r2
 80010c6:	f77f af26 	ble.w	8000f16 <main+0xa6>
 80010ca:	e712      	b.n	8000ef2 <main+0x82>
 80010cc:	f3af 8000 	nop.w
 80010d0:	cccccccd 	.word	0xcccccccd
 80010d4:	3ffccccc 	.word	0x3ffccccc
 80010d8:	00000000 	.word	0x00000000
 80010dc:	4060e000 	.word	0x4060e000
 80010e0:	2000011c 	.word	0x2000011c
 80010e4:	40000400 	.word	0x40000400
 80010e8:	40020800 	.word	0x40020800
 80010ec:	200000d2 	.word	0x200000d2
 80010f0:	40020400 	.word	0x40020400
 80010f4:	20000230 	.word	0x20000230
 80010f8:	20000238 	.word	0x20000238
 80010fc:	20000234 	.word	0x20000234
 8001100:	66666667 	.word	0x66666667
 8001104:	08005cb0 	.word	0x08005cb0
 8001108:	20000090 	.word	0x20000090
 800110c:	200001ec 	.word	0x200001ec
 8001110:	200000d0 	.word	0x200000d0
 8001114:	20000164 	.word	0x20000164
 8001118:	20000000 	.word	0x20000000
 800111c:	2000023c 	.word	0x2000023c
			}

		}
		// MANUAL
		else if (mode == 0) {
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	2b00      	cmp	r3, #0
 8001124:	f47f aee5 	bne.w	8000ef2 <main+0x82>
			//set the intial postion
			TIM3_Ch1_DCVAL = (1500);
 8001128:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
			TIM3_Ch2_DCVAL = (1500);
 800112e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001132:	623b      	str	r3, [r7, #32]
			TIM3->CCR1 = TIM3_Ch1_DCVAL;
 8001134:	4a78      	ldr	r2, [pc, #480]	; (8001318 <main+0x4a8>)
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	6353      	str	r3, [r2, #52]	; 0x34
			TIM3->CCR2 = TIM3_Ch2_DCVAL;
 800113a:	4a77      	ldr	r2, [pc, #476]	; (8001318 <main+0x4a8>)
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	6393      	str	r3, [r2, #56]	; 0x38
			//turn the led off
			HAL_GPIO_WritePin(LASERn_GPIO_Port, LASERn_Pin, GPIO_PIN_SET);
 8001140:	2201      	movs	r2, #1
 8001142:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001146:	4875      	ldr	r0, [pc, #468]	; (800131c <main+0x4ac>)
 8001148:	f001 fd64 	bl	8002c14 <HAL_GPIO_WritePin>

				//----------------------------testing the analog stick

				//BLUE RGB
				/*Configure GPIO pin Output Level */
				HAL_GPIO_WritePin(GPIOB, BLUE_Pin | GREEN_Pin | RED_Pin,
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001152:	4872      	ldr	r0, [pc, #456]	; (800131c <main+0x4ac>)
 8001154:	f001 fd5e 	bl	8002c14 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
				/*Configure GPIO pin Output Level */
				HAL_GPIO_WritePin(GPIOB, BLUE_Pin, GPIO_PIN_SET);
 8001158:	2201      	movs	r2, #1
 800115a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800115e:	486f      	ldr	r0, [pc, #444]	; (800131c <main+0x4ac>)
 8001160:	f001 fd58 	bl	8002c14 <HAL_GPIO_WritePin>
				HAL_Delay(200);
 8001164:	20c8      	movs	r0, #200	; 0xc8
 8001166:	f000 fdff 	bl	8001d68 <HAL_Delay>

				//GREEN RGB
				HAL_GPIO_WritePin(GPIOB, BLUE_Pin | GREEN_Pin | RED_Pin,
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001170:	486a      	ldr	r0, [pc, #424]	; (800131c <main+0x4ac>)
 8001172:	f001 fd4f 	bl	8002c14 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
				/*Configure GPIO pin Output Level */
				HAL_GPIO_WritePin(GPIOB, GREEN_Pin, GPIO_PIN_SET);
 8001176:	2201      	movs	r2, #1
 8001178:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800117c:	4867      	ldr	r0, [pc, #412]	; (800131c <main+0x4ac>)
 800117e:	f001 fd49 	bl	8002c14 <HAL_GPIO_WritePin>
				HAL_Delay(200);
 8001182:	20c8      	movs	r0, #200	; 0xc8
 8001184:	f000 fdf0 	bl	8001d68 <HAL_Delay>

				//RED RGB
				HAL_GPIO_WritePin(GPIOB, BLUE_Pin | GREEN_Pin | RED_Pin,
 8001188:	2200      	movs	r2, #0
 800118a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800118e:	4863      	ldr	r0, [pc, #396]	; (800131c <main+0x4ac>)
 8001190:	f001 fd40 	bl	8002c14 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
				/*Configure GPIO pin Output Level */
				HAL_GPIO_WritePin(GPIOB, RED_Pin, GPIO_PIN_SET);
 8001194:	2201      	movs	r2, #1
 8001196:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800119a:	4860      	ldr	r0, [pc, #384]	; (800131c <main+0x4ac>)
 800119c:	f001 fd3a 	bl	8002c14 <HAL_GPIO_WritePin>
				HAL_Delay(200);
 80011a0:	20c8      	movs	r0, #200	; 0xc8
 80011a2:	f000 fde1 	bl	8001d68 <HAL_Delay>

				//---------------------------------------------------------------

				//read the joystick values
				ADC_Select_CH(9);
 80011a6:	2009      	movs	r0, #9
 80011a8:	f7ff fd02 	bl	8000bb0 <ADC_Select_CH>
				HAL_ADC_Start(&hadc1);
 80011ac:	485c      	ldr	r0, [pc, #368]	; (8001320 <main+0x4b0>)
 80011ae:	f000 fe43 	bl	8001e38 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1, 1000);
 80011b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011b6:	485a      	ldr	r0, [pc, #360]	; (8001320 <main+0x4b0>)
 80011b8:	f000 ff25 	bl	8002006 <HAL_ADC_PollForConversion>
				uint8_t ADC_CH9 = HAL_ADC_GetValue(&hadc1);
 80011bc:	4858      	ldr	r0, [pc, #352]	; (8001320 <main+0x4b0>)
 80011be:	f000 ffad 	bl	800211c <HAL_ADC_GetValue>
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
//				sprintf((char*) msg_buffer,
//						"\r\n Digitized Analog Value for Y: %d", ADC_CH9);
//				HAL_UART_Transmit(&huart6, msg_buffer,
//						strlen((char*) msg_buffer), 500);
				HAL_ADC_Stop(&hadc1);
 80011c6:	4856      	ldr	r0, [pc, #344]	; (8001320 <main+0x4b0>)
 80011c8:	f000 feea 	bl	8001fa0 <HAL_ADC_Stop>

				ADC_Select_CH(14);
 80011cc:	200e      	movs	r0, #14
 80011ce:	f7ff fcef 	bl	8000bb0 <ADC_Select_CH>
				HAL_ADC_Start(&hadc1);
 80011d2:	4853      	ldr	r0, [pc, #332]	; (8001320 <main+0x4b0>)
 80011d4:	f000 fe30 	bl	8001e38 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1, 1000);
 80011d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011dc:	4850      	ldr	r0, [pc, #320]	; (8001320 <main+0x4b0>)
 80011de:	f000 ff12 	bl	8002006 <HAL_ADC_PollForConversion>
				uint8_t ADC_CH14 = HAL_ADC_GetValue(&hadc1);
 80011e2:	484f      	ldr	r0, [pc, #316]	; (8001320 <main+0x4b0>)
 80011e4:	f000 ff9a 	bl	800211c <HAL_ADC_GetValue>
 80011e8:	4603      	mov	r3, r0
 80011ea:	71bb      	strb	r3, [r7, #6]
//				sprintf((char*) msg_buffer,
//						"\r\n Digitized Analog Value for X: %d\n\n", ADC_CH14);
				HAL_ADC_Stop(&hadc1);
 80011ec:	484c      	ldr	r0, [pc, #304]	; (8001320 <main+0x4b0>)
 80011ee:	f000 fed7 	bl	8001fa0 <HAL_ADC_Stop>

				HAL_UART_Receive_IT(&huart1, &byte, 2);
 80011f2:	2202      	movs	r2, #2
 80011f4:	494b      	ldr	r1, [pc, #300]	; (8001324 <main+0x4b4>)
 80011f6:	484c      	ldr	r0, [pc, #304]	; (8001328 <main+0x4b8>)
 80011f8:	f003 f915 	bl	8004426 <HAL_UART_Receive_IT>
				HAL_UART_Transmit(&huart1, &test, 1, 500);
 80011fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001200:	2201      	movs	r2, #1
 8001202:	494a      	ldr	r1, [pc, #296]	; (800132c <main+0x4bc>)
 8001204:	4848      	ldr	r0, [pc, #288]	; (8001328 <main+0x4b8>)
 8001206:	f003 f87c 	bl	8004302 <HAL_UART_Transmit>
				while (rcv_intpt_flag == (00)) {
 800120a:	bf00      	nop
 800120c:	4b48      	ldr	r3, [pc, #288]	; (8001330 <main+0x4c0>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0fb      	beq.n	800120c <main+0x39c>
				};
				distance = (byte[0] << 8) + byte[1];
 8001214:	4b43      	ldr	r3, [pc, #268]	; (8001324 <main+0x4b4>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	b29b      	uxth	r3, r3
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	b29a      	uxth	r2, r3
 8001220:	4b40      	ldr	r3, [pc, #256]	; (8001324 <main+0x4b4>)
 8001222:	785b      	ldrb	r3, [r3, #1]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	b29b      	uxth	r3, r3
 8001228:	4413      	add	r3, r2
 800122a:	b29a      	uxth	r2, r3
 800122c:	4b41      	ldr	r3, [pc, #260]	; (8001334 <main+0x4c4>)
 800122e:	801a      	strh	r2, [r3, #0]
				sprintf((char) msg_buffer, "\r\n Distance Sensed (mm)= %d",
 8001230:	4b41      	ldr	r3, [pc, #260]	; (8001338 <main+0x4c8>)
 8001232:	b2db      	uxtb	r3, r3
 8001234:	4618      	mov	r0, r3
 8001236:	4b3f      	ldr	r3, [pc, #252]	; (8001334 <main+0x4c4>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	b29b      	uxth	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	493f      	ldr	r1, [pc, #252]	; (800133c <main+0x4cc>)
 8001240:	f004 f8bc 	bl	80053bc <siprintf>
						distance);
				HAL_UART_Transmit(&huart6, msg_buffer,
						strlen((char) msg_buffer), 500);
 8001244:	4b3c      	ldr	r3, [pc, #240]	; (8001338 <main+0x4c8>)
 8001246:	b2db      	uxtb	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	f7fe ffc9 	bl	80001e0 <strlen>
 800124e:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart6, msg_buffer,
 8001250:	b29a      	uxth	r2, r3
 8001252:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001256:	4938      	ldr	r1, [pc, #224]	; (8001338 <main+0x4c8>)
 8001258:	4839      	ldr	r0, [pc, #228]	; (8001340 <main+0x4d0>)
 800125a:	f003 f852 	bl	8004302 <HAL_UART_Transmit>
				rcv_intpt_flag = 00;
 800125e:	4b34      	ldr	r3, [pc, #208]	; (8001330 <main+0x4c0>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]

				//------------------------------------------------------------

				//if the servo in the right range
				if (TIM3_Ch2_DCVAL <= 2500 && TIM3_Ch2_DCVAL >= 500) {
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800126a:	4293      	cmp	r3, r2
 800126c:	dc3a      	bgt.n	80012e4 <main+0x474>
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001274:	db36      	blt.n	80012e4 <main+0x474>
					//MOVEMENT FOR THE TILT
					if (ADC_CH9 < 69) {
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b44      	cmp	r3, #68	; 0x44
 800127a:	d803      	bhi.n	8001284 <main+0x414>
						TIM3_Ch1_DCVAL -= 40;
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	3b28      	subs	r3, #40	; 0x28
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
 8001282:	e013      	b.n	80012ac <main+0x43c>
					} else if (ADC_CH9 < 120) {
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	2b77      	cmp	r3, #119	; 0x77
 8001288:	d803      	bhi.n	8001292 <main+0x422>
						TIM3_Ch1_DCVAL -= 20;
 800128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128c:	3b14      	subs	r3, #20
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
 8001290:	e00c      	b.n	80012ac <main+0x43c>
					} else if (ADC_CH9 < 140) {
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b8b      	cmp	r3, #139	; 0x8b
 8001296:	d909      	bls.n	80012ac <main+0x43c>
						TIM3_Ch1_DCVAL += 0;
					} else if (ADC_CH9 < 181) {
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	2bb4      	cmp	r3, #180	; 0xb4
 800129c:	d803      	bhi.n	80012a6 <main+0x436>
						TIM3_Ch1_DCVAL += 40;
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	3328      	adds	r3, #40	; 0x28
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
 80012a4:	e002      	b.n	80012ac <main+0x43c>
					} else if (ADC_CH9 < 256) {
						TIM3_Ch1_DCVAL += 20;
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	3314      	adds	r3, #20
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
					}

					//MOVEMENT FOR THE PAN

					//------------------------------------------------------
					if (ADC_CH14 < 69) {
 80012ac:	79bb      	ldrb	r3, [r7, #6]
 80012ae:	2b44      	cmp	r3, #68	; 0x44
 80012b0:	d803      	bhi.n	80012ba <main+0x44a>
						TIM3_Ch2_DCVAL -= 40;
 80012b2:	6a3b      	ldr	r3, [r7, #32]
 80012b4:	3b28      	subs	r3, #40	; 0x28
 80012b6:	623b      	str	r3, [r7, #32]
					if (ADC_CH14 < 69) {
 80012b8:	e025      	b.n	8001306 <main+0x496>
					} else if (ADC_CH14 < 120) {
 80012ba:	79bb      	ldrb	r3, [r7, #6]
 80012bc:	2b77      	cmp	r3, #119	; 0x77
 80012be:	d803      	bhi.n	80012c8 <main+0x458>
						TIM3_Ch2_DCVAL -= 20;
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	3b14      	subs	r3, #20
 80012c4:	623b      	str	r3, [r7, #32]
					if (ADC_CH14 < 69) {
 80012c6:	e01e      	b.n	8001306 <main+0x496>
					} else if (ADC_CH14 < 144) {
 80012c8:	79bb      	ldrb	r3, [r7, #6]
 80012ca:	2b8f      	cmp	r3, #143	; 0x8f
 80012cc:	d91b      	bls.n	8001306 <main+0x496>
						TIM3_Ch2_DCVAL += 0;
					} else if (ADC_CH14 < 181) {
 80012ce:	79bb      	ldrb	r3, [r7, #6]
 80012d0:	2bb4      	cmp	r3, #180	; 0xb4
 80012d2:	d803      	bhi.n	80012dc <main+0x46c>
						TIM3_Ch2_DCVAL += 40;
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	3328      	adds	r3, #40	; 0x28
 80012d8:	623b      	str	r3, [r7, #32]
					if (ADC_CH14 < 69) {
 80012da:	e014      	b.n	8001306 <main+0x496>
					} else if (ADC_CH14 < 256) {
						TIM3_Ch2_DCVAL += 20;
 80012dc:	6a3b      	ldr	r3, [r7, #32]
 80012de:	3314      	adds	r3, #20
 80012e0:	623b      	str	r3, [r7, #32]
					if (ADC_CH14 < 69) {
 80012e2:	e010      	b.n	8001306 <main+0x496>
					}

				} else {
					if (TIM3_Ch2_DCVAL > 2500) {
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80012ea:	4293      	cmp	r3, r2
 80012ec:	dd03      	ble.n	80012f6 <main+0x486>
						TIM3_Ch2_DCVAL = 2500;
 80012ee:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80012f2:	623b      	str	r3, [r7, #32]
 80012f4:	e008      	b.n	8001308 <main+0x498>
					} else if (TIM3_Ch2_DCVAL < 500) {
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012fc:	da04      	bge.n	8001308 <main+0x498>
						TIM3_Ch2_DCVAL = 500;
 80012fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001302:	623b      	str	r3, [r7, #32]
 8001304:	e000      	b.n	8001308 <main+0x498>
					if (ADC_CH14 < 69) {
 8001306:	bf00      	nop
					}
				}
				//set the values of the server
				TIM3->CCR1 = TIM3_Ch1_DCVAL;
 8001308:	4a03      	ldr	r2, [pc, #12]	; (8001318 <main+0x4a8>)
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	6353      	str	r3, [r2, #52]	; 0x34
				TIM3->CCR2 = TIM3_Ch2_DCVAL;
 800130e:	4a02      	ldr	r2, [pc, #8]	; (8001318 <main+0x4a8>)
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	6393      	str	r3, [r2, #56]	; 0x38
			while (1) {
 8001314:	e71a      	b.n	800114c <main+0x2dc>
 8001316:	bf00      	nop
 8001318:	40000400 	.word	0x40000400
 800131c:	40020400 	.word	0x40020400
 8001320:	200000d4 	.word	0x200000d4
 8001324:	200000d0 	.word	0x200000d0
 8001328:	20000164 	.word	0x20000164
 800132c:	20000000 	.word	0x20000000
 8001330:	2000023c 	.word	0x2000023c
 8001334:	200000d2 	.word	0x200000d2
 8001338:	20000090 	.word	0x20000090
 800133c:	08005cec 	.word	0x08005cec
 8001340:	200001ec 	.word	0x200001ec

08001344 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b094      	sub	sp, #80	; 0x50
 8001348:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	2230      	movs	r2, #48	; 0x30
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f004 f82a 	bl	80053ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <SystemClock_Config+0xb4>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	4a21      	ldr	r2, [pc, #132]	; (80013f8 <SystemClock_Config+0xb4>)
 8001372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001376:	6413      	str	r3, [r2, #64]	; 0x40
 8001378:	4b1f      	ldr	r3, [pc, #124]	; (80013f8 <SystemClock_Config+0xb4>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <SystemClock_Config+0xb8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a1b      	ldr	r2, [pc, #108]	; (80013fc <SystemClock_Config+0xb8>)
 800138e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <SystemClock_Config+0xb8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013a0:	2302      	movs	r3, #2
 80013a2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a4:	2301      	movs	r3, #1
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013a8:	2310      	movs	r3, #16
 80013aa:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013b0:	f107 0320 	add.w	r3, r7, #32
 80013b4:	4618      	mov	r0, r3
 80013b6:	f001 fc47 	bl	8002c48 <HAL_RCC_OscConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SystemClock_Config+0x80>
		Error_Handler();
 80013c0:	f000 fa16 	bl	80017f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013c4:	230f      	movs	r3, #15
 80013c6:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f001 feaa 	bl	8003138 <HAL_RCC_ClockConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0xaa>
		Error_Handler();
 80013ea:	f000 fa01 	bl	80017f0 <Error_Handler>
	}
}
 80013ee:	bf00      	nop
 80013f0:	3750      	adds	r7, #80	; 0x50
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40007000 	.word	0x40007000

08001400 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001406:	463b      	mov	r3, r7
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001412:	4b21      	ldr	r3, [pc, #132]	; (8001498 <MX_ADC1_Init+0x98>)
 8001414:	4a21      	ldr	r2, [pc, #132]	; (800149c <MX_ADC1_Init+0x9c>)
 8001416:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001418:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <MX_ADC1_Init+0x98>)
 800141a:	2200      	movs	r2, #0
 800141c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800141e:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <MX_ADC1_Init+0x98>)
 8001420:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001424:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8001426:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <MX_ADC1_Init+0x98>)
 8001428:	2201      	movs	r2, #1
 800142a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800142c:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <MX_ADC1_Init+0x98>)
 800142e:	2200      	movs	r2, #0
 8001430:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001432:	4b19      	ldr	r3, [pc, #100]	; (8001498 <MX_ADC1_Init+0x98>)
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800143a:	4b17      	ldr	r3, [pc, #92]	; (8001498 <MX_ADC1_Init+0x98>)
 800143c:	2200      	movs	r2, #0
 800143e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001440:	4b15      	ldr	r3, [pc, #84]	; (8001498 <MX_ADC1_Init+0x98>)
 8001442:	4a17      	ldr	r2, [pc, #92]	; (80014a0 <MX_ADC1_Init+0xa0>)
 8001444:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <MX_ADC1_Init+0x98>)
 8001448:	2200      	movs	r2, #0
 800144a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_ADC1_Init+0x98>)
 800144e:	2201      	movs	r2, #1
 8001450:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_ADC1_Init+0x98>)
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_ADC1_Init+0x98>)
 800145c:	2201      	movs	r2, #1
 800145e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <MX_ADC1_Init+0x98>)
 8001462:	f000 fca5 	bl	8001db0 <HAL_ADC_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_ADC1_Init+0x70>
		Error_Handler();
 800146c:	f000 f9c0 	bl	80017f0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8001470:	2309      	movs	r3, #9
 8001472:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001474:	2301      	movs	r3, #1
 8001476:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001478:	2301      	movs	r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800147c:	463b      	mov	r3, r7
 800147e:	4619      	mov	r1, r3
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_ADC1_Init+0x98>)
 8001482:	f000 fe59 	bl	8002138 <HAL_ADC_ConfigChannel>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_ADC1_Init+0x90>
		Error_Handler();
 800148c:	f000 f9b0 	bl	80017f0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200000d4 	.word	0x200000d4
 800149c:	40012000 	.word	0x40012000
 80014a0:	0f000001 	.word	0x0f000001

080014a4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08e      	sub	sp, #56	; 0x38
 80014a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80014aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80014b8:	f107 0320 	add.w	r3, r7, #32
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
 80014d0:	615a      	str	r2, [r3, #20]
 80014d2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80014d4:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <MX_TIM3_Init+0x104>)
 80014d6:	4a35      	ldr	r2, [pc, #212]	; (80015ac <MX_TIM3_Init+0x108>)
 80014d8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 16 - 1;
 80014da:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <MX_TIM3_Init+0x104>)
 80014dc:	220f      	movs	r2, #15
 80014de:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e0:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <MX_TIM3_Init+0x104>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 20000 - 1;
 80014e6:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <MX_TIM3_Init+0x104>)
 80014e8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80014ec:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ee:	4b2e      	ldr	r3, [pc, #184]	; (80015a8 <MX_TIM3_Init+0x104>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014f4:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <MX_TIM3_Init+0x104>)
 80014f6:	2280      	movs	r2, #128	; 0x80
 80014f8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80014fa:	482b      	ldr	r0, [pc, #172]	; (80015a8 <MX_TIM3_Init+0x104>)
 80014fc:	f002 f83c 	bl	8003578 <HAL_TIM_Base_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM3_Init+0x66>
		Error_Handler();
 8001506:	f000 f973 	bl	80017f0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001510:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001514:	4619      	mov	r1, r3
 8001516:	4824      	ldr	r0, [pc, #144]	; (80015a8 <MX_TIM3_Init+0x104>)
 8001518:	f002 faa4 	bl	8003a64 <HAL_TIM_ConfigClockSource>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM3_Init+0x82>
		Error_Handler();
 8001522:	f000 f965 	bl	80017f0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001526:	4820      	ldr	r0, [pc, #128]	; (80015a8 <MX_TIM3_Init+0x104>)
 8001528:	f002 f8d0 	bl	80036cc <HAL_TIM_PWM_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM3_Init+0x92>
		Error_Handler();
 8001532:	f000 f95d 	bl	80017f0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800153e:	f107 0320 	add.w	r3, r7, #32
 8001542:	4619      	mov	r1, r3
 8001544:	4818      	ldr	r0, [pc, #96]	; (80015a8 <MX_TIM3_Init+0x104>)
 8001546:	f002 fe21 	bl	800418c <HAL_TIMEx_MasterConfigSynchronization>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8001550:	f000 f94e 	bl	80017f0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001554:	2360      	movs	r3, #96	; 0x60
 8001556:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 500 - 1;
 8001558:	f240 13f3 	movw	r3, #499	; 0x1f3
 800155c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	2200      	movs	r2, #0
 800156a:	4619      	mov	r1, r3
 800156c:	480e      	ldr	r0, [pc, #56]	; (80015a8 <MX_TIM3_Init+0x104>)
 800156e:	f002 f9b7 	bl	80038e0 <HAL_TIM_PWM_ConfigChannel>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8001578:	f000 f93a 	bl	80017f0 <Error_Handler>
	}
	sConfigOC.Pulse = 2500 - 1;
 800157c:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8001580:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	2204      	movs	r2, #4
 8001586:	4619      	mov	r1, r3
 8001588:	4807      	ldr	r0, [pc, #28]	; (80015a8 <MX_TIM3_Init+0x104>)
 800158a:	f002 f9a9 	bl	80038e0 <HAL_TIM_PWM_ConfigChannel>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM3_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 8001594:	f000 f92c 	bl	80017f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001598:	4803      	ldr	r0, [pc, #12]	; (80015a8 <MX_TIM3_Init+0x104>)
 800159a:	f000 f9d9 	bl	8001950 <HAL_TIM_MspPostInit>

}
 800159e:	bf00      	nop
 80015a0:	3738      	adds	r7, #56	; 0x38
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2000011c 	.word	0x2000011c
 80015ac:	40000400 	.word	0x40000400

080015b0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <MX_USART1_UART_Init+0x50>)
 80015b8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015c0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015d6:	220c      	movs	r2, #12
 80015d8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015e8:	f002 fe3e 	bl	8004268 <HAL_UART_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80015f2:	f000 f8fd 	bl	80017f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000164 	.word	0x20000164
 8001600:	40011000 	.word	0x40011000

08001604 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 800160a:	4a12      	ldr	r2, [pc, #72]	; (8001654 <MX_USART2_UART_Init+0x50>)
 800160c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001614:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 800162a:	220c      	movs	r2, #12
 800162c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 800163c:	f002 fe14 	bl	8004268 <HAL_UART_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001646:	f000 f8d3 	bl	80017f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200001a8 	.word	0x200001a8
 8001654:	40004400 	.word	0x40004400

08001658 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_USART6_UART_Init+0x4c>)
 800165e:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <MX_USART6_UART_Init+0x50>)
 8001660:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <MX_USART6_UART_Init+0x4c>)
 8001664:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001668:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <MX_USART6_UART_Init+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <MX_USART6_UART_Init+0x4c>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <MX_USART6_UART_Init+0x4c>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <MX_USART6_UART_Init+0x4c>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <MX_USART6_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <MX_USART6_UART_Init+0x4c>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 800168e:	4805      	ldr	r0, [pc, #20]	; (80016a4 <MX_USART6_UART_Init+0x4c>)
 8001690:	f002 fdea 	bl	8004268 <HAL_UART_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_USART6_UART_Init+0x46>
		Error_Handler();
 800169a:	f000 f8a9 	bl	80017f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200001ec 	.word	0x200001ec
 80016a8:	40011400 	.word	0x40011400

080016ac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	4b3b      	ldr	r3, [pc, #236]	; (80017b4 <MX_GPIO_Init+0x108>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a3a      	ldr	r2, [pc, #232]	; (80017b4 <MX_GPIO_Init+0x108>)
 80016cc:	f043 0304 	orr.w	r3, r3, #4
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b38      	ldr	r3, [pc, #224]	; (80017b4 <MX_GPIO_Init+0x108>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b34      	ldr	r3, [pc, #208]	; (80017b4 <MX_GPIO_Init+0x108>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a33      	ldr	r2, [pc, #204]	; (80017b4 <MX_GPIO_Init+0x108>)
 80016e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <MX_GPIO_Init+0x108>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <MX_GPIO_Init+0x108>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a2c      	ldr	r2, [pc, #176]	; (80017b4 <MX_GPIO_Init+0x108>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <MX_GPIO_Init+0x108>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <MX_GPIO_Init+0x108>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a25      	ldr	r2, [pc, #148]	; (80017b4 <MX_GPIO_Init+0x108>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <MX_GPIO_Init+0x108>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	2120      	movs	r1, #32
 8001736:	4820      	ldr	r0, [pc, #128]	; (80017b8 <MX_GPIO_Init+0x10c>)
 8001738:	f001 fa6c 	bl	8002c14 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LASERn_GPIO_Port, LASERn_Pin, GPIO_PIN_SET);
 800173c:	2201      	movs	r2, #1
 800173e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001742:	481e      	ldr	r0, [pc, #120]	; (80017bc <MX_GPIO_Init+0x110>)
 8001744:	f001 fa66 	bl	8002c14 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, BLUE_Pin | GREEN_Pin | RED_Pin, GPIO_PIN_RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800174e:	481b      	ldr	r0, [pc, #108]	; (80017bc <MX_GPIO_Init+0x110>)
 8001750:	f001 fa60 	bl	8002c14 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001758:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800175a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800175e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4619      	mov	r1, r3
 800176a:	4815      	ldr	r0, [pc, #84]	; (80017c0 <MX_GPIO_Init+0x114>)
 800176c:	f001 f8b6 	bl	80028dc <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001770:	2320      	movs	r3, #32
 8001772:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001774:	2301      	movs	r3, #1
 8001776:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	4619      	mov	r1, r3
 8001786:	480c      	ldr	r0, [pc, #48]	; (80017b8 <MX_GPIO_Init+0x10c>)
 8001788:	f001 f8a8 	bl	80028dc <HAL_GPIO_Init>

	/*Configure GPIO pins : LASERn_Pin BLUE_Pin GREEN_Pin RED_Pin */
	GPIO_InitStruct.Pin = LASERn_Pin | BLUE_Pin | GREEN_Pin | RED_Pin;
 800178c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001790:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001792:	2301      	movs	r3, #1
 8001794:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	4619      	mov	r1, r3
 80017a4:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_GPIO_Init+0x110>)
 80017a6:	f001 f899 	bl	80028dc <HAL_GPIO_Init>

}
 80017aa:	bf00      	nop
 80017ac:	3728      	adds	r7, #40	; 0x28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020400 	.word	0x40020400
 80017c0:	40020800 	.word	0x40020800

080017c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <HAL_UART_RxCpltCallback+0x24>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d102      	bne.n	80017dc <HAL_UART_RxCpltCallback+0x18>
		rcv_intpt_flag = 1;
 80017d6:	4b05      	ldr	r3, [pc, #20]	; (80017ec <HAL_UART_RxCpltCallback+0x28>)
 80017d8:	2201      	movs	r2, #1
 80017da:	701a      	strb	r2, [r3, #0]
	}
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	40011000 	.word	0x40011000
 80017ec:	2000023c 	.word	0x2000023c

080017f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f4:	b672      	cpsid	i
}
 80017f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017f8:	e7fe      	b.n	80017f8 <Error_Handler+0x8>
	...

080017fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <HAL_MspInit+0x4c>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	4a0f      	ldr	r2, [pc, #60]	; (8001848 <HAL_MspInit+0x4c>)
 800180c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001810:	6453      	str	r3, [r2, #68]	; 0x44
 8001812:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <HAL_MspInit+0x4c>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	603b      	str	r3, [r7, #0]
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <HAL_MspInit+0x4c>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a08      	ldr	r2, [pc, #32]	; (8001848 <HAL_MspInit+0x4c>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_MspInit+0x4c>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800183a:	2007      	movs	r0, #7
 800183c:	f000 ff7a 	bl	8002734 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40023800 	.word	0x40023800

0800184c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	; 0x28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a24      	ldr	r2, [pc, #144]	; (80018fc <HAL_ADC_MspInit+0xb0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d141      	bne.n	80018f2 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	4b23      	ldr	r3, [pc, #140]	; (8001900 <HAL_ADC_MspInit+0xb4>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	4a22      	ldr	r2, [pc, #136]	; (8001900 <HAL_ADC_MspInit+0xb4>)
 8001878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187c:	6453      	str	r3, [r2, #68]	; 0x44
 800187e:	4b20      	ldr	r3, [pc, #128]	; (8001900 <HAL_ADC_MspInit+0xb4>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <HAL_ADC_MspInit+0xb4>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a1b      	ldr	r2, [pc, #108]	; (8001900 <HAL_ADC_MspInit+0xb4>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_ADC_MspInit+0xb4>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_ADC_MspInit+0xb4>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a14      	ldr	r2, [pc, #80]	; (8001900 <HAL_ADC_MspInit+0xb4>)
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_ADC_MspInit+0xb4>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018c2:	2310      	movs	r3, #16
 80018c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c6:	2303      	movs	r3, #3
 80018c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	480b      	ldr	r0, [pc, #44]	; (8001904 <HAL_ADC_MspInit+0xb8>)
 80018d6:	f001 f801 	bl	80028dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018da:	2302      	movs	r3, #2
 80018dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018de:	2303      	movs	r3, #3
 80018e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	4806      	ldr	r0, [pc, #24]	; (8001908 <HAL_ADC_MspInit+0xbc>)
 80018ee:	f000 fff5 	bl	80028dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018f2:	bf00      	nop
 80018f4:	3728      	adds	r7, #40	; 0x28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40012000 	.word	0x40012000
 8001900:	40023800 	.word	0x40023800
 8001904:	40020800 	.word	0x40020800
 8001908:	40020400 	.word	0x40020400

0800190c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <HAL_TIM_Base_MspInit+0x3c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d10d      	bne.n	800193a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_TIM_Base_MspInit+0x40>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a09      	ldr	r2, [pc, #36]	; (800194c <HAL_TIM_Base_MspInit+0x40>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b07      	ldr	r3, [pc, #28]	; (800194c <HAL_TIM_Base_MspInit+0x40>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40000400 	.word	0x40000400
 800194c:	40023800 	.word	0x40023800

08001950 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <HAL_TIM_MspPostInit+0x68>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d11d      	bne.n	80019ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	4b11      	ldr	r3, [pc, #68]	; (80019bc <HAL_TIM_MspPostInit+0x6c>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a10      	ldr	r2, [pc, #64]	; (80019bc <HAL_TIM_MspPostInit+0x6c>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <HAL_TIM_MspPostInit+0x6c>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800198e:	23c0      	movs	r3, #192	; 0xc0
 8001990:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800199e:	2302      	movs	r3, #2
 80019a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	f107 030c 	add.w	r3, r7, #12
 80019a6:	4619      	mov	r1, r3
 80019a8:	4805      	ldr	r0, [pc, #20]	; (80019c0 <HAL_TIM_MspPostInit+0x70>)
 80019aa:	f000 ff97 	bl	80028dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019ae:	bf00      	nop
 80019b0:	3720      	adds	r7, #32
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40000400 	.word	0x40000400
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40020000 	.word	0x40020000

080019c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08e      	sub	sp, #56	; 0x38
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a4f      	ldr	r2, [pc, #316]	; (8001b20 <HAL_UART_MspInit+0x15c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d135      	bne.n	8001a52 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
 80019ea:	4b4e      	ldr	r3, [pc, #312]	; (8001b24 <HAL_UART_MspInit+0x160>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	4a4d      	ldr	r2, [pc, #308]	; (8001b24 <HAL_UART_MspInit+0x160>)
 80019f0:	f043 0310 	orr.w	r3, r3, #16
 80019f4:	6453      	str	r3, [r2, #68]	; 0x44
 80019f6:	4b4b      	ldr	r3, [pc, #300]	; (8001b24 <HAL_UART_MspInit+0x160>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	623b      	str	r3, [r7, #32]
 8001a00:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
 8001a06:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <HAL_UART_MspInit+0x160>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a46      	ldr	r2, [pc, #280]	; (8001b24 <HAL_UART_MspInit+0x160>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b44      	ldr	r3, [pc, #272]	; (8001b24 <HAL_UART_MspInit+0x160>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a30:	2307      	movs	r3, #7
 8001a32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a38:	4619      	mov	r1, r3
 8001a3a:	483b      	ldr	r0, [pc, #236]	; (8001b28 <HAL_UART_MspInit+0x164>)
 8001a3c:	f000 ff4e 	bl	80028dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	2025      	movs	r0, #37	; 0x25
 8001a46:	f000 fe80 	bl	800274a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a4a:	2025      	movs	r0, #37	; 0x25
 8001a4c:	f000 fe99 	bl	8002782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a50:	e062      	b.n	8001b18 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART2)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a35      	ldr	r2, [pc, #212]	; (8001b2c <HAL_UART_MspInit+0x168>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d12c      	bne.n	8001ab6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61bb      	str	r3, [r7, #24]
 8001a60:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <HAL_UART_MspInit+0x160>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	4a2f      	ldr	r2, [pc, #188]	; (8001b24 <HAL_UART_MspInit+0x160>)
 8001a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6c:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <HAL_UART_MspInit+0x160>)
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	61bb      	str	r3, [r7, #24]
 8001a76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	4b29      	ldr	r3, [pc, #164]	; (8001b24 <HAL_UART_MspInit+0x160>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	4a28      	ldr	r2, [pc, #160]	; (8001b24 <HAL_UART_MspInit+0x160>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6313      	str	r3, [r2, #48]	; 0x30
 8001a88:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <HAL_UART_MspInit+0x160>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a94:	230c      	movs	r3, #12
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aa4:	2307      	movs	r3, #7
 8001aa6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aac:	4619      	mov	r1, r3
 8001aae:	481e      	ldr	r0, [pc, #120]	; (8001b28 <HAL_UART_MspInit+0x164>)
 8001ab0:	f000 ff14 	bl	80028dc <HAL_GPIO_Init>
}
 8001ab4:	e030      	b.n	8001b18 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART6)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a1d      	ldr	r2, [pc, #116]	; (8001b30 <HAL_UART_MspInit+0x16c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d12b      	bne.n	8001b18 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <HAL_UART_MspInit+0x160>)
 8001ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac8:	4a16      	ldr	r2, [pc, #88]	; (8001b24 <HAL_UART_MspInit+0x160>)
 8001aca:	f043 0320 	orr.w	r3, r3, #32
 8001ace:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <HAL_UART_MspInit+0x160>)
 8001ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad4:	f003 0320 	and.w	r3, r3, #32
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <HAL_UART_MspInit+0x160>)
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <HAL_UART_MspInit+0x160>)
 8001ae6:	f043 0304 	orr.w	r3, r3, #4
 8001aea:	6313      	str	r3, [r2, #48]	; 0x30
 8001aec:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <HAL_UART_MspInit+0x160>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001af8:	23c0      	movs	r3, #192	; 0xc0
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b04:	2303      	movs	r3, #3
 8001b06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b08:	2308      	movs	r3, #8
 8001b0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b10:	4619      	mov	r1, r3
 8001b12:	4808      	ldr	r0, [pc, #32]	; (8001b34 <HAL_UART_MspInit+0x170>)
 8001b14:	f000 fee2 	bl	80028dc <HAL_GPIO_Init>
}
 8001b18:	bf00      	nop
 8001b1a:	3738      	adds	r7, #56	; 0x38
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40011000 	.word	0x40011000
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40020000 	.word	0x40020000
 8001b2c:	40004400 	.word	0x40004400
 8001b30:	40011400 	.word	0x40011400
 8001b34:	40020800 	.word	0x40020800

08001b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <NMI_Handler+0x4>

08001b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b42:	e7fe      	b.n	8001b42 <HardFault_Handler+0x4>

08001b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <MemManage_Handler+0x4>

08001b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4e:	e7fe      	b.n	8001b4e <BusFault_Handler+0x4>

08001b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <UsageFault_Handler+0x4>

08001b56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b84:	f000 f8d0 	bl	8001d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <USART1_IRQHandler+0x10>)
 8001b92:	f002 fc79 	bl	8004488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000164 	.word	0x20000164

08001ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba8:	4a14      	ldr	r2, [pc, #80]	; (8001bfc <_sbrk+0x5c>)
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <_sbrk+0x60>)
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <_sbrk+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d102      	bne.n	8001bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <_sbrk+0x64>)
 8001bbe:	4a12      	ldr	r2, [pc, #72]	; (8001c08 <_sbrk+0x68>)
 8001bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <_sbrk+0x64>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d207      	bcs.n	8001be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd0:	f003 fbc2 	bl	8005358 <__errno>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
 8001bde:	e009      	b.n	8001bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <_sbrk+0x64>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <_sbrk+0x64>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <_sbrk+0x64>)
 8001bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20020000 	.word	0x20020000
 8001c00:	00000400 	.word	0x00000400
 8001c04:	20000240 	.word	0x20000240
 8001c08:	20000258 	.word	0x20000258

08001c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <SystemInit+0x20>)
 8001c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c16:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <SystemInit+0x20>)
 8001c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c34:	480d      	ldr	r0, [pc, #52]	; (8001c6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c36:	490e      	ldr	r1, [pc, #56]	; (8001c70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c38:	4a0e      	ldr	r2, [pc, #56]	; (8001c74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c3c:	e002      	b.n	8001c44 <LoopCopyDataInit>

08001c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c42:	3304      	adds	r3, #4

08001c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c48:	d3f9      	bcc.n	8001c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4a:	4a0b      	ldr	r2, [pc, #44]	; (8001c78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c4c:	4c0b      	ldr	r4, [pc, #44]	; (8001c7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c50:	e001      	b.n	8001c56 <LoopFillZerobss>

08001c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c54:	3204      	adds	r2, #4

08001c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c58:	d3fb      	bcc.n	8001c52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c5a:	f7ff ffd7 	bl	8001c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c5e:	f003 fb81 	bl	8005364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c62:	f7ff f905 	bl	8000e70 <main>
  bx  lr    
 8001c66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c70:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c74:	08005d64 	.word	0x08005d64
  ldr r2, =_sbss
 8001c78:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001c7c:	20000258 	.word	0x20000258

08001c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c80:	e7fe      	b.n	8001c80 <ADC_IRQHandler>
	...

08001c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c88:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <HAL_Init+0x40>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	; (8001cc4 <HAL_Init+0x40>)
 8001c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_Init+0x40>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <HAL_Init+0x40>)
 8001c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <HAL_Init+0x40>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <HAL_Init+0x40>)
 8001ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cac:	2003      	movs	r0, #3
 8001cae:	f000 fd41 	bl	8002734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f000 f808 	bl	8001cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb8:	f7ff fda0 	bl	80017fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023c00 	.word	0x40023c00

08001cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_InitTick+0x54>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_InitTick+0x58>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 fd59 	bl	800279e <HAL_SYSTICK_Config>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00e      	b.n	8001d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b0f      	cmp	r3, #15
 8001cfa:	d80a      	bhi.n	8001d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f000 fd21 	bl	800274a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d08:	4a06      	ldr	r2, [pc, #24]	; (8001d24 <HAL_InitTick+0x5c>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e000      	b.n	8001d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000004 	.word	0x20000004
 8001d20:	2000000c 	.word	0x2000000c
 8001d24:	20000008 	.word	0x20000008

08001d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_IncTick+0x20>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_IncTick+0x24>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <HAL_IncTick+0x24>)
 8001d3a:	6013      	str	r3, [r2, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	2000000c 	.word	0x2000000c
 8001d4c:	20000244 	.word	0x20000244

08001d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return uwTick;
 8001d54:	4b03      	ldr	r3, [pc, #12]	; (8001d64 <HAL_GetTick+0x14>)
 8001d56:	681b      	ldr	r3, [r3, #0]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000244 	.word	0x20000244

08001d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d70:	f7ff ffee 	bl	8001d50 <HAL_GetTick>
 8001d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d80:	d005      	beq.n	8001d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <HAL_Delay+0x44>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d8e:	bf00      	nop
 8001d90:	f7ff ffde 	bl	8001d50 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d8f7      	bhi.n	8001d90 <HAL_Delay+0x28>
  {
  }
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	2000000c 	.word	0x2000000c

08001db0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e033      	b.n	8001e2e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff fd3c 	bl	800184c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d118      	bne.n	8001e20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001df6:	f023 0302 	bic.w	r3, r3, #2
 8001dfa:	f043 0202 	orr.w	r2, r3, #2
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 faca 	bl	800239c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f023 0303 	bic.w	r3, r3, #3
 8001e16:	f043 0201 	orr.w	r2, r3, #1
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40
 8001e1e:	e001      	b.n	8001e24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_ADC_Start+0x1a>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e097      	b.n	8001f82 <HAL_ADC_Start+0x14a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d018      	beq.n	8001e9a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e78:	4b45      	ldr	r3, [pc, #276]	; (8001f90 <HAL_ADC_Start+0x158>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a45      	ldr	r2, [pc, #276]	; (8001f94 <HAL_ADC_Start+0x15c>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	0c9a      	lsrs	r2, r3, #18
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e8c:	e002      	b.n	8001e94 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f9      	bne.n	8001e8e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d15f      	bne.n	8001f68 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d007      	beq.n	8001eda <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ed2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ee6:	d106      	bne.n	8001ef6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eec:	f023 0206 	bic.w	r2, r3, #6
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ef4:	e002      	b.n	8001efc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f04:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <HAL_ADC_Start+0x160>)
 8001f06:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f10:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10f      	bne.n	8001f3e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d129      	bne.n	8001f80 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	e020      	b.n	8001f80 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <HAL_ADC_Start+0x164>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d11b      	bne.n	8001f80 <HAL_ADC_Start+0x148>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d114      	bne.n	8001f80 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	e00b      	b.n	8001f80 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	f043 0210 	orr.w	r2, r3, #16
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f78:	f043 0201 	orr.w	r2, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	20000004 	.word	0x20000004
 8001f94:	431bde83 	.word	0x431bde83
 8001f98:	40012300 	.word	0x40012300
 8001f9c:	40012000 	.word	0x40012000

08001fa0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADC_Stop+0x16>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e021      	b.n	8001ffa <HAL_ADC_Stop+0x5a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0201 	bic.w	r2, r2, #1
 8001fcc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d109      	bne.n	8001ff0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	f043 0201 	orr.w	r2, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002022:	d113      	bne.n	800204c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800202e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002032:	d10b      	bne.n	800204c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	f043 0220 	orr.w	r2, r3, #32
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e063      	b.n	8002114 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800204c:	f7ff fe80 	bl	8001d50 <HAL_GetTick>
 8002050:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002052:	e021      	b.n	8002098 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205a:	d01d      	beq.n	8002098 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d007      	beq.n	8002072 <HAL_ADC_PollForConversion+0x6c>
 8002062:	f7ff fe75 	bl	8001d50 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d212      	bcs.n	8002098 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b02      	cmp	r3, #2
 800207e:	d00b      	beq.n	8002098 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	f043 0204 	orr.w	r2, r3, #4
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e03d      	b.n	8002114 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d1d6      	bne.n	8002054 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f06f 0212 	mvn.w	r2, #18
 80020ae:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d123      	bne.n	8002112 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d11f      	bne.n	8002112 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d006      	beq.n	80020ee <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d111      	bne.n	8002112 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d105      	bne.n	8002112 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f043 0201 	orr.w	r2, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x1c>
 8002150:	2302      	movs	r3, #2
 8002152:	e113      	b.n	800237c <HAL_ADC_ConfigChannel+0x244>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b09      	cmp	r3, #9
 8002162:	d925      	bls.n	80021b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68d9      	ldr	r1, [r3, #12]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	b29b      	uxth	r3, r3
 8002170:	461a      	mov	r2, r3
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	3b1e      	subs	r3, #30
 800217a:	2207      	movs	r2, #7
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43da      	mvns	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	400a      	ands	r2, r1
 8002188:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68d9      	ldr	r1, [r3, #12]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	b29b      	uxth	r3, r3
 800219a:	4618      	mov	r0, r3
 800219c:	4603      	mov	r3, r0
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4403      	add	r3, r0
 80021a2:	3b1e      	subs	r3, #30
 80021a4:	409a      	lsls	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	e022      	b.n	80021f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6919      	ldr	r1, [r3, #16]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	461a      	mov	r2, r3
 80021be:	4613      	mov	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4413      	add	r3, r2
 80021c4:	2207      	movs	r2, #7
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	400a      	ands	r2, r1
 80021d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6919      	ldr	r1, [r3, #16]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	4618      	mov	r0, r3
 80021e6:	4603      	mov	r3, r0
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4403      	add	r3, r0
 80021ec:	409a      	lsls	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b06      	cmp	r3, #6
 80021fc:	d824      	bhi.n	8002248 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	3b05      	subs	r3, #5
 8002210:	221f      	movs	r2, #31
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43da      	mvns	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	400a      	ands	r2, r1
 800221e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	4618      	mov	r0, r3
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	3b05      	subs	r3, #5
 800223a:	fa00 f203 	lsl.w	r2, r0, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	635a      	str	r2, [r3, #52]	; 0x34
 8002246:	e04c      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b0c      	cmp	r3, #12
 800224e:	d824      	bhi.n	800229a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	3b23      	subs	r3, #35	; 0x23
 8002262:	221f      	movs	r2, #31
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43da      	mvns	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	400a      	ands	r2, r1
 8002270:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	b29b      	uxth	r3, r3
 800227e:	4618      	mov	r0, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	3b23      	subs	r3, #35	; 0x23
 800228c:	fa00 f203 	lsl.w	r2, r0, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	631a      	str	r2, [r3, #48]	; 0x30
 8002298:	e023      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	3b41      	subs	r3, #65	; 0x41
 80022ac:	221f      	movs	r2, #31
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43da      	mvns	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	400a      	ands	r2, r1
 80022ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	4618      	mov	r0, r3
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	3b41      	subs	r3, #65	; 0x41
 80022d6:	fa00 f203 	lsl.w	r2, r0, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022e2:	4b29      	ldr	r3, [pc, #164]	; (8002388 <HAL_ADC_ConfigChannel+0x250>)
 80022e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a28      	ldr	r2, [pc, #160]	; (800238c <HAL_ADC_ConfigChannel+0x254>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d10f      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x1d8>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b12      	cmp	r3, #18
 80022f6:	d10b      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a1d      	ldr	r2, [pc, #116]	; (800238c <HAL_ADC_ConfigChannel+0x254>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d12b      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x23a>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a1c      	ldr	r2, [pc, #112]	; (8002390 <HAL_ADC_ConfigChannel+0x258>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d003      	beq.n	800232c <HAL_ADC_ConfigChannel+0x1f4>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b11      	cmp	r3, #17
 800232a:	d122      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a11      	ldr	r2, [pc, #68]	; (8002390 <HAL_ADC_ConfigChannel+0x258>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d111      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HAL_ADC_ConfigChannel+0x25c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a11      	ldr	r2, [pc, #68]	; (8002398 <HAL_ADC_ConfigChannel+0x260>)
 8002354:	fba2 2303 	umull	r2, r3, r2, r3
 8002358:	0c9a      	lsrs	r2, r3, #18
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002364:	e002      	b.n	800236c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	3b01      	subs	r3, #1
 800236a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f9      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	40012300 	.word	0x40012300
 800238c:	40012000 	.word	0x40012000
 8002390:	10000012 	.word	0x10000012
 8002394:	20000004 	.word	0x20000004
 8002398:	431bde83 	.word	0x431bde83

0800239c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023a4:	4b79      	ldr	r3, [pc, #484]	; (800258c <ADC_Init+0x1f0>)
 80023a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	431a      	orrs	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6859      	ldr	r1, [r3, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	021a      	lsls	r2, r3, #8
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6859      	ldr	r1, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002416:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6899      	ldr	r1, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68da      	ldr	r2, [r3, #12]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	4a58      	ldr	r2, [pc, #352]	; (8002590 <ADC_Init+0x1f4>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d022      	beq.n	800247a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002442:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6899      	ldr	r1, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002464:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6899      	ldr	r1, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	e00f      	b.n	800249a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002488:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002498:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0202 	bic.w	r2, r2, #2
 80024a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6899      	ldr	r1, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	7e1b      	ldrb	r3, [r3, #24]
 80024b4:	005a      	lsls	r2, r3, #1
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d01b      	beq.n	8002500 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6859      	ldr	r1, [r3, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	3b01      	subs	r3, #1
 80024f4:	035a      	lsls	r2, r3, #13
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	e007      	b.n	8002510 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800250e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800251e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	3b01      	subs	r3, #1
 800252c:	051a      	lsls	r2, r3, #20
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002544:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6899      	ldr	r1, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002552:	025a      	lsls	r2, r3, #9
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800256a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6899      	ldr	r1, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	029a      	lsls	r2, r3, #10
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	609a      	str	r2, [r3, #8]
}
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	40012300 	.word	0x40012300
 8002590:	0f000001 	.word	0x0f000001

08002594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025b0:	4013      	ands	r3, r2
 80025b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c6:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	60d3      	str	r3, [r2, #12]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <__NVIC_GetPriorityGrouping+0x18>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	f003 0307 	and.w	r3, r3, #7
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	2b00      	cmp	r3, #0
 8002608:	db0b      	blt.n	8002622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	f003 021f 	and.w	r2, r3, #31
 8002610:	4907      	ldr	r1, [pc, #28]	; (8002630 <__NVIC_EnableIRQ+0x38>)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	2001      	movs	r0, #1
 800261a:	fa00 f202 	lsl.w	r2, r0, r2
 800261e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000e100 	.word	0xe000e100

08002634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	6039      	str	r1, [r7, #0]
 800263e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002644:	2b00      	cmp	r3, #0
 8002646:	db0a      	blt.n	800265e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	b2da      	uxtb	r2, r3
 800264c:	490c      	ldr	r1, [pc, #48]	; (8002680 <__NVIC_SetPriority+0x4c>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	0112      	lsls	r2, r2, #4
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	440b      	add	r3, r1
 8002658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800265c:	e00a      	b.n	8002674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	b2da      	uxtb	r2, r3
 8002662:	4908      	ldr	r1, [pc, #32]	; (8002684 <__NVIC_SetPriority+0x50>)
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	3b04      	subs	r3, #4
 800266c:	0112      	lsls	r2, r2, #4
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	440b      	add	r3, r1
 8002672:	761a      	strb	r2, [r3, #24]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000e100 	.word	0xe000e100
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002688:	b480      	push	{r7}
 800268a:	b089      	sub	sp, #36	; 0x24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f1c3 0307 	rsb	r3, r3, #7
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	bf28      	it	cs
 80026a6:	2304      	movcs	r3, #4
 80026a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3304      	adds	r3, #4
 80026ae:	2b06      	cmp	r3, #6
 80026b0:	d902      	bls.n	80026b8 <NVIC_EncodePriority+0x30>
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3b03      	subs	r3, #3
 80026b6:	e000      	b.n	80026ba <NVIC_EncodePriority+0x32>
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	f04f 32ff 	mov.w	r2, #4294967295
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43da      	mvns	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	401a      	ands	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d0:	f04f 31ff 	mov.w	r1, #4294967295
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	fa01 f303 	lsl.w	r3, r1, r3
 80026da:	43d9      	mvns	r1, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e0:	4313      	orrs	r3, r2
         );
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3724      	adds	r7, #36	; 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002700:	d301      	bcc.n	8002706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002702:	2301      	movs	r3, #1
 8002704:	e00f      	b.n	8002726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002706:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <SysTick_Config+0x40>)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3b01      	subs	r3, #1
 800270c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800270e:	210f      	movs	r1, #15
 8002710:	f04f 30ff 	mov.w	r0, #4294967295
 8002714:	f7ff ff8e 	bl	8002634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <SysTick_Config+0x40>)
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800271e:	4b04      	ldr	r3, [pc, #16]	; (8002730 <SysTick_Config+0x40>)
 8002720:	2207      	movs	r2, #7
 8002722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	e000e010 	.word	0xe000e010

08002734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff ff29 	bl	8002594 <__NVIC_SetPriorityGrouping>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800274a:	b580      	push	{r7, lr}
 800274c:	b086      	sub	sp, #24
 800274e:	af00      	add	r7, sp, #0
 8002750:	4603      	mov	r3, r0
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
 8002756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800275c:	f7ff ff3e 	bl	80025dc <__NVIC_GetPriorityGrouping>
 8002760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	6978      	ldr	r0, [r7, #20]
 8002768:	f7ff ff8e 	bl	8002688 <NVIC_EncodePriority>
 800276c:	4602      	mov	r2, r0
 800276e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002772:	4611      	mov	r1, r2
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff5d 	bl	8002634 <__NVIC_SetPriority>
}
 800277a:	bf00      	nop
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff31 	bl	80025f8 <__NVIC_EnableIRQ>
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff ffa2 	bl	80026f0 <SysTick_Config>
 80027ac:	4603      	mov	r3, r0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027c4:	f7ff fac4 	bl	8001d50 <HAL_GetTick>
 80027c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d008      	beq.n	80027e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2280      	movs	r2, #128	; 0x80
 80027da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e052      	b.n	800288e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0216 	bic.w	r2, r2, #22
 80027f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695a      	ldr	r2, [r3, #20]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002806:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	2b00      	cmp	r3, #0
 800280e:	d103      	bne.n	8002818 <HAL_DMA_Abort+0x62>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0208 	bic.w	r2, r2, #8
 8002826:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0201 	bic.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002838:	e013      	b.n	8002862 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800283a:	f7ff fa89 	bl	8001d50 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b05      	cmp	r3, #5
 8002846:	d90c      	bls.n	8002862 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2220      	movs	r2, #32
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2203      	movs	r2, #3
 8002852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e015      	b.n	800288e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1e4      	bne.n	800283a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002874:	223f      	movs	r2, #63	; 0x3f
 8002876:	409a      	lsls	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d004      	beq.n	80028b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2280      	movs	r2, #128	; 0x80
 80028ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e00c      	b.n	80028ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2205      	movs	r2, #5
 80028b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0201 	bic.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	; 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	e159      	b.n	8002bac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028f8:	2201      	movs	r2, #1
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4013      	ands	r3, r2
 800290a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	429a      	cmp	r2, r3
 8002912:	f040 8148 	bne.w	8002ba6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	2b01      	cmp	r3, #1
 8002920:	d005      	beq.n	800292e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800292a:	2b02      	cmp	r3, #2
 800292c:	d130      	bne.n	8002990 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	2203      	movs	r2, #3
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4013      	ands	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002964:	2201      	movs	r2, #1
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	f003 0201 	and.w	r2, r3, #1
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	2b03      	cmp	r3, #3
 800299a:	d017      	beq.n	80029cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	2203      	movs	r2, #3
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d123      	bne.n	8002a20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	08da      	lsrs	r2, r3, #3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3208      	adds	r2, #8
 80029e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	220f      	movs	r2, #15
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	08da      	lsrs	r2, r3, #3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3208      	adds	r2, #8
 8002a1a:	69b9      	ldr	r1, [r7, #24]
 8002a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0203 	and.w	r2, r3, #3
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 80a2 	beq.w	8002ba6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	4b57      	ldr	r3, [pc, #348]	; (8002bc4 <HAL_GPIO_Init+0x2e8>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	4a56      	ldr	r2, [pc, #344]	; (8002bc4 <HAL_GPIO_Init+0x2e8>)
 8002a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a70:	6453      	str	r3, [r2, #68]	; 0x44
 8002a72:	4b54      	ldr	r3, [pc, #336]	; (8002bc4 <HAL_GPIO_Init+0x2e8>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a7e:	4a52      	ldr	r2, [pc, #328]	; (8002bc8 <HAL_GPIO_Init+0x2ec>)
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	3302      	adds	r3, #2
 8002a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	220f      	movs	r2, #15
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a49      	ldr	r2, [pc, #292]	; (8002bcc <HAL_GPIO_Init+0x2f0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d019      	beq.n	8002ade <HAL_GPIO_Init+0x202>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a48      	ldr	r2, [pc, #288]	; (8002bd0 <HAL_GPIO_Init+0x2f4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d013      	beq.n	8002ada <HAL_GPIO_Init+0x1fe>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a47      	ldr	r2, [pc, #284]	; (8002bd4 <HAL_GPIO_Init+0x2f8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00d      	beq.n	8002ad6 <HAL_GPIO_Init+0x1fa>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a46      	ldr	r2, [pc, #280]	; (8002bd8 <HAL_GPIO_Init+0x2fc>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d007      	beq.n	8002ad2 <HAL_GPIO_Init+0x1f6>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a45      	ldr	r2, [pc, #276]	; (8002bdc <HAL_GPIO_Init+0x300>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d101      	bne.n	8002ace <HAL_GPIO_Init+0x1f2>
 8002aca:	2304      	movs	r3, #4
 8002acc:	e008      	b.n	8002ae0 <HAL_GPIO_Init+0x204>
 8002ace:	2307      	movs	r3, #7
 8002ad0:	e006      	b.n	8002ae0 <HAL_GPIO_Init+0x204>
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e004      	b.n	8002ae0 <HAL_GPIO_Init+0x204>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e002      	b.n	8002ae0 <HAL_GPIO_Init+0x204>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <HAL_GPIO_Init+0x204>
 8002ade:	2300      	movs	r3, #0
 8002ae0:	69fa      	ldr	r2, [r7, #28]
 8002ae2:	f002 0203 	and.w	r2, r2, #3
 8002ae6:	0092      	lsls	r2, r2, #2
 8002ae8:	4093      	lsls	r3, r2
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002af0:	4935      	ldr	r1, [pc, #212]	; (8002bc8 <HAL_GPIO_Init+0x2ec>)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	089b      	lsrs	r3, r3, #2
 8002af6:	3302      	adds	r3, #2
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002afe:	4b38      	ldr	r3, [pc, #224]	; (8002be0 <HAL_GPIO_Init+0x304>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	43db      	mvns	r3, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b22:	4a2f      	ldr	r2, [pc, #188]	; (8002be0 <HAL_GPIO_Init+0x304>)
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b28:	4b2d      	ldr	r3, [pc, #180]	; (8002be0 <HAL_GPIO_Init+0x304>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b4c:	4a24      	ldr	r2, [pc, #144]	; (8002be0 <HAL_GPIO_Init+0x304>)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b52:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <HAL_GPIO_Init+0x304>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b76:	4a1a      	ldr	r2, [pc, #104]	; (8002be0 <HAL_GPIO_Init+0x304>)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b7c:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <HAL_GPIO_Init+0x304>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ba0:	4a0f      	ldr	r2, [pc, #60]	; (8002be0 <HAL_GPIO_Init+0x304>)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	61fb      	str	r3, [r7, #28]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	2b0f      	cmp	r3, #15
 8002bb0:	f67f aea2 	bls.w	80028f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bb4:	bf00      	nop
 8002bb6:	bf00      	nop
 8002bb8:	3724      	adds	r7, #36	; 0x24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40013800 	.word	0x40013800
 8002bcc:	40020000 	.word	0x40020000
 8002bd0:	40020400 	.word	0x40020400
 8002bd4:	40020800 	.word	0x40020800
 8002bd8:	40020c00 	.word	0x40020c00
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40013c00 	.word	0x40013c00

08002be4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	887b      	ldrh	r3, [r7, #2]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
 8002c00:	e001      	b.n	8002c06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c02:	2300      	movs	r3, #0
 8002c04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	807b      	strh	r3, [r7, #2]
 8002c20:	4613      	mov	r3, r2
 8002c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c24:	787b      	ldrb	r3, [r7, #1]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c2a:	887a      	ldrh	r2, [r7, #2]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c30:	e003      	b.n	8002c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c32:	887b      	ldrh	r3, [r7, #2]
 8002c34:	041a      	lsls	r2, r3, #16
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	619a      	str	r2, [r3, #24]
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
	...

08002c48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e267      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d075      	beq.n	8002d52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c66:	4b88      	ldr	r3, [pc, #544]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d00c      	beq.n	8002c8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c72:	4b85      	ldr	r3, [pc, #532]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d112      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c7e:	4b82      	ldr	r3, [pc, #520]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c8a:	d10b      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8c:	4b7e      	ldr	r3, [pc, #504]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d05b      	beq.n	8002d50 <HAL_RCC_OscConfig+0x108>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d157      	bne.n	8002d50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e242      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cac:	d106      	bne.n	8002cbc <HAL_RCC_OscConfig+0x74>
 8002cae:	4b76      	ldr	r3, [pc, #472]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a75      	ldr	r2, [pc, #468]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	e01d      	b.n	8002cf8 <HAL_RCC_OscConfig+0xb0>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x98>
 8002cc6:	4b70      	ldr	r3, [pc, #448]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a6f      	ldr	r2, [pc, #444]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	4b6d      	ldr	r3, [pc, #436]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a6c      	ldr	r2, [pc, #432]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e00b      	b.n	8002cf8 <HAL_RCC_OscConfig+0xb0>
 8002ce0:	4b69      	ldr	r3, [pc, #420]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a68      	ldr	r2, [pc, #416]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	4b66      	ldr	r3, [pc, #408]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a65      	ldr	r2, [pc, #404]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d013      	beq.n	8002d28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d00:	f7ff f826 	bl	8001d50 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d08:	f7ff f822 	bl	8001d50 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b64      	cmp	r3, #100	; 0x64
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e207      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1a:	4b5b      	ldr	r3, [pc, #364]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0xc0>
 8002d26:	e014      	b.n	8002d52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d28:	f7ff f812 	bl	8001d50 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d30:	f7ff f80e 	bl	8001d50 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b64      	cmp	r3, #100	; 0x64
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e1f3      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d42:	4b51      	ldr	r3, [pc, #324]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0xe8>
 8002d4e:	e000      	b.n	8002d52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d063      	beq.n	8002e26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d5e:	4b4a      	ldr	r3, [pc, #296]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00b      	beq.n	8002d82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d6a:	4b47      	ldr	r3, [pc, #284]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d11c      	bne.n	8002db0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d76:	4b44      	ldr	r3, [pc, #272]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d116      	bne.n	8002db0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d82:	4b41      	ldr	r3, [pc, #260]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d005      	beq.n	8002d9a <HAL_RCC_OscConfig+0x152>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d001      	beq.n	8002d9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e1c7      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9a:	4b3b      	ldr	r3, [pc, #236]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4937      	ldr	r1, [pc, #220]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dae:	e03a      	b.n	8002e26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d020      	beq.n	8002dfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db8:	4b34      	ldr	r3, [pc, #208]	; (8002e8c <HAL_RCC_OscConfig+0x244>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbe:	f7fe ffc7 	bl	8001d50 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc6:	f7fe ffc3 	bl	8001d50 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e1a8      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd8:	4b2b      	ldr	r3, [pc, #172]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de4:	4b28      	ldr	r3, [pc, #160]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4925      	ldr	r1, [pc, #148]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	600b      	str	r3, [r1, #0]
 8002df8:	e015      	b.n	8002e26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dfa:	4b24      	ldr	r3, [pc, #144]	; (8002e8c <HAL_RCC_OscConfig+0x244>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e00:	f7fe ffa6 	bl	8001d50 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e08:	f7fe ffa2 	bl	8001d50 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e187      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e1a:	4b1b      	ldr	r3, [pc, #108]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d036      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d016      	beq.n	8002e68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e3a:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <HAL_RCC_OscConfig+0x248>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e40:	f7fe ff86 	bl	8001d50 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e48:	f7fe ff82 	bl	8001d50 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e167      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0x200>
 8002e66:	e01b      	b.n	8002ea0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e68:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <HAL_RCC_OscConfig+0x248>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6e:	f7fe ff6f 	bl	8001d50 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e74:	e00e      	b.n	8002e94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e76:	f7fe ff6b 	bl	8001d50 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d907      	bls.n	8002e94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e150      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	42470000 	.word	0x42470000
 8002e90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e94:	4b88      	ldr	r3, [pc, #544]	; (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1ea      	bne.n	8002e76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 8097 	beq.w	8002fdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eb2:	4b81      	ldr	r3, [pc, #516]	; (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10f      	bne.n	8002ede <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	4b7d      	ldr	r3, [pc, #500]	; (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	4a7c      	ldr	r2, [pc, #496]	; (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ece:	4b7a      	ldr	r3, [pc, #488]	; (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eda:	2301      	movs	r3, #1
 8002edc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ede:	4b77      	ldr	r3, [pc, #476]	; (80030bc <HAL_RCC_OscConfig+0x474>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d118      	bne.n	8002f1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eea:	4b74      	ldr	r3, [pc, #464]	; (80030bc <HAL_RCC_OscConfig+0x474>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a73      	ldr	r2, [pc, #460]	; (80030bc <HAL_RCC_OscConfig+0x474>)
 8002ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef6:	f7fe ff2b 	bl	8001d50 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efe:	f7fe ff27 	bl	8001d50 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e10c      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f10:	4b6a      	ldr	r3, [pc, #424]	; (80030bc <HAL_RCC_OscConfig+0x474>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d106      	bne.n	8002f32 <HAL_RCC_OscConfig+0x2ea>
 8002f24:	4b64      	ldr	r3, [pc, #400]	; (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f28:	4a63      	ldr	r2, [pc, #396]	; (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f30:	e01c      	b.n	8002f6c <HAL_RCC_OscConfig+0x324>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b05      	cmp	r3, #5
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x30c>
 8002f3a:	4b5f      	ldr	r3, [pc, #380]	; (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3e:	4a5e      	ldr	r2, [pc, #376]	; (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f40:	f043 0304 	orr.w	r3, r3, #4
 8002f44:	6713      	str	r3, [r2, #112]	; 0x70
 8002f46:	4b5c      	ldr	r3, [pc, #368]	; (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4a:	4a5b      	ldr	r2, [pc, #364]	; (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	6713      	str	r3, [r2, #112]	; 0x70
 8002f52:	e00b      	b.n	8002f6c <HAL_RCC_OscConfig+0x324>
 8002f54:	4b58      	ldr	r3, [pc, #352]	; (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f58:	4a57      	ldr	r2, [pc, #348]	; (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f5a:	f023 0301 	bic.w	r3, r3, #1
 8002f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f60:	4b55      	ldr	r3, [pc, #340]	; (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f64:	4a54      	ldr	r2, [pc, #336]	; (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f66:	f023 0304 	bic.w	r3, r3, #4
 8002f6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d015      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f74:	f7fe feec 	bl	8001d50 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7a:	e00a      	b.n	8002f92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f7c:	f7fe fee8 	bl	8001d50 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e0cb      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f92:	4b49      	ldr	r3, [pc, #292]	; (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0ee      	beq.n	8002f7c <HAL_RCC_OscConfig+0x334>
 8002f9e:	e014      	b.n	8002fca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa0:	f7fe fed6 	bl	8001d50 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa6:	e00a      	b.n	8002fbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa8:	f7fe fed2 	bl	8001d50 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e0b5      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fbe:	4b3e      	ldr	r3, [pc, #248]	; (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1ee      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d105      	bne.n	8002fdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd0:	4b39      	ldr	r3, [pc, #228]	; (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	4a38      	ldr	r2, [pc, #224]	; (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 80a1 	beq.w	8003128 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fe6:	4b34      	ldr	r3, [pc, #208]	; (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d05c      	beq.n	80030ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d141      	bne.n	800307e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffa:	4b31      	ldr	r3, [pc, #196]	; (80030c0 <HAL_RCC_OscConfig+0x478>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003000:	f7fe fea6 	bl	8001d50 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003008:	f7fe fea2 	bl	8001d50 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e087      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301a:	4b27      	ldr	r3, [pc, #156]	; (80030b8 <HAL_RCC_OscConfig+0x470>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69da      	ldr	r2, [r3, #28]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	019b      	lsls	r3, r3, #6
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	3b01      	subs	r3, #1
 8003040:	041b      	lsls	r3, r3, #16
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	061b      	lsls	r3, r3, #24
 800304a:	491b      	ldr	r1, [pc, #108]	; (80030b8 <HAL_RCC_OscConfig+0x470>)
 800304c:	4313      	orrs	r3, r2
 800304e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003050:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <HAL_RCC_OscConfig+0x478>)
 8003052:	2201      	movs	r2, #1
 8003054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003056:	f7fe fe7b 	bl	8001d50 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305e:	f7fe fe77 	bl	8001d50 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e05c      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003070:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <HAL_RCC_OscConfig+0x470>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0f0      	beq.n	800305e <HAL_RCC_OscConfig+0x416>
 800307c:	e054      	b.n	8003128 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307e:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <HAL_RCC_OscConfig+0x478>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fe fe64 	bl	8001d50 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800308c:	f7fe fe60 	bl	8001d50 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e045      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309e:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <HAL_RCC_OscConfig+0x470>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x444>
 80030aa:	e03d      	b.n	8003128 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d107      	bne.n	80030c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e038      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40007000 	.word	0x40007000
 80030c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030c4:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <HAL_RCC_OscConfig+0x4ec>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d028      	beq.n	8003124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030dc:	429a      	cmp	r2, r3
 80030de:	d121      	bne.n	8003124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d11a      	bne.n	8003124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030f4:	4013      	ands	r3, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d111      	bne.n	8003124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	085b      	lsrs	r3, r3, #1
 800310c:	3b01      	subs	r3, #1
 800310e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003110:	429a      	cmp	r2, r3
 8003112:	d107      	bne.n	8003124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003120:	429a      	cmp	r2, r3
 8003122:	d001      	beq.n	8003128 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800

08003138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0cc      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800314c:	4b68      	ldr	r3, [pc, #416]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d90c      	bls.n	8003174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	4b65      	ldr	r3, [pc, #404]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b63      	ldr	r3, [pc, #396]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0b8      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d020      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800318c:	4b59      	ldr	r3, [pc, #356]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	4a58      	ldr	r2, [pc, #352]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003196:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031a4:	4b53      	ldr	r3, [pc, #332]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4a52      	ldr	r2, [pc, #328]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b0:	4b50      	ldr	r3, [pc, #320]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	494d      	ldr	r1, [pc, #308]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d044      	beq.n	8003258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d6:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d119      	bne.n	8003216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e07f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d003      	beq.n	80031f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f6:	4b3f      	ldr	r3, [pc, #252]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e06f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003206:	4b3b      	ldr	r3, [pc, #236]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e067      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003216:	4b37      	ldr	r3, [pc, #220]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f023 0203 	bic.w	r2, r3, #3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4934      	ldr	r1, [pc, #208]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	4313      	orrs	r3, r2
 8003226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003228:	f7fe fd92 	bl	8001d50 <HAL_GetTick>
 800322c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322e:	e00a      	b.n	8003246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003230:	f7fe fd8e 	bl	8001d50 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f241 3288 	movw	r2, #5000	; 0x1388
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e04f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003246:	4b2b      	ldr	r3, [pc, #172]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 020c 	and.w	r2, r3, #12
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	429a      	cmp	r2, r3
 8003256:	d1eb      	bne.n	8003230 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003258:	4b25      	ldr	r3, [pc, #148]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d20c      	bcs.n	8003280 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	4b22      	ldr	r3, [pc, #136]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326e:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e032      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800328c:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4916      	ldr	r1, [pc, #88]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032aa:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	490e      	ldr	r1, [pc, #56]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032be:	f000 f821 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80032c2:	4602      	mov	r2, r0
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	490a      	ldr	r1, [pc, #40]	; (80032f8 <HAL_RCC_ClockConfig+0x1c0>)
 80032d0:	5ccb      	ldrb	r3, [r1, r3]
 80032d2:	fa22 f303 	lsr.w	r3, r2, r3
 80032d6:	4a09      	ldr	r2, [pc, #36]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032da:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fe fcf2 	bl	8001cc8 <HAL_InitTick>

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40023c00 	.word	0x40023c00
 80032f4:	40023800 	.word	0x40023800
 80032f8:	08005d08 	.word	0x08005d08
 80032fc:	20000004 	.word	0x20000004
 8003300:	20000008 	.word	0x20000008

08003304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003308:	b094      	sub	sp, #80	; 0x50
 800330a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	647b      	str	r3, [r7, #68]	; 0x44
 8003310:	2300      	movs	r3, #0
 8003312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003314:	2300      	movs	r3, #0
 8003316:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800331c:	4b79      	ldr	r3, [pc, #484]	; (8003504 <HAL_RCC_GetSysClockFreq+0x200>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 030c 	and.w	r3, r3, #12
 8003324:	2b08      	cmp	r3, #8
 8003326:	d00d      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x40>
 8003328:	2b08      	cmp	r3, #8
 800332a:	f200 80e1 	bhi.w	80034f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0x34>
 8003332:	2b04      	cmp	r3, #4
 8003334:	d003      	beq.n	800333e <HAL_RCC_GetSysClockFreq+0x3a>
 8003336:	e0db      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003338:	4b73      	ldr	r3, [pc, #460]	; (8003508 <HAL_RCC_GetSysClockFreq+0x204>)
 800333a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800333c:	e0db      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800333e:	4b73      	ldr	r3, [pc, #460]	; (800350c <HAL_RCC_GetSysClockFreq+0x208>)
 8003340:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003342:	e0d8      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003344:	4b6f      	ldr	r3, [pc, #444]	; (8003504 <HAL_RCC_GetSysClockFreq+0x200>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800334c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800334e:	4b6d      	ldr	r3, [pc, #436]	; (8003504 <HAL_RCC_GetSysClockFreq+0x200>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d063      	beq.n	8003422 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800335a:	4b6a      	ldr	r3, [pc, #424]	; (8003504 <HAL_RCC_GetSysClockFreq+0x200>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	099b      	lsrs	r3, r3, #6
 8003360:	2200      	movs	r2, #0
 8003362:	63bb      	str	r3, [r7, #56]	; 0x38
 8003364:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800336c:	633b      	str	r3, [r7, #48]	; 0x30
 800336e:	2300      	movs	r3, #0
 8003370:	637b      	str	r3, [r7, #52]	; 0x34
 8003372:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003376:	4622      	mov	r2, r4
 8003378:	462b      	mov	r3, r5
 800337a:	f04f 0000 	mov.w	r0, #0
 800337e:	f04f 0100 	mov.w	r1, #0
 8003382:	0159      	lsls	r1, r3, #5
 8003384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003388:	0150      	lsls	r0, r2, #5
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4621      	mov	r1, r4
 8003390:	1a51      	subs	r1, r2, r1
 8003392:	6139      	str	r1, [r7, #16]
 8003394:	4629      	mov	r1, r5
 8003396:	eb63 0301 	sbc.w	r3, r3, r1
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033a8:	4659      	mov	r1, fp
 80033aa:	018b      	lsls	r3, r1, #6
 80033ac:	4651      	mov	r1, sl
 80033ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033b2:	4651      	mov	r1, sl
 80033b4:	018a      	lsls	r2, r1, #6
 80033b6:	4651      	mov	r1, sl
 80033b8:	ebb2 0801 	subs.w	r8, r2, r1
 80033bc:	4659      	mov	r1, fp
 80033be:	eb63 0901 	sbc.w	r9, r3, r1
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033d6:	4690      	mov	r8, r2
 80033d8:	4699      	mov	r9, r3
 80033da:	4623      	mov	r3, r4
 80033dc:	eb18 0303 	adds.w	r3, r8, r3
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	462b      	mov	r3, r5
 80033e4:	eb49 0303 	adc.w	r3, r9, r3
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	f04f 0300 	mov.w	r3, #0
 80033f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033f6:	4629      	mov	r1, r5
 80033f8:	024b      	lsls	r3, r1, #9
 80033fa:	4621      	mov	r1, r4
 80033fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003400:	4621      	mov	r1, r4
 8003402:	024a      	lsls	r2, r1, #9
 8003404:	4610      	mov	r0, r2
 8003406:	4619      	mov	r1, r3
 8003408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800340a:	2200      	movs	r2, #0
 800340c:	62bb      	str	r3, [r7, #40]	; 0x28
 800340e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003410:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003414:	f7fd fa4a 	bl	80008ac <__aeabi_uldivmod>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4613      	mov	r3, r2
 800341e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003420:	e058      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003422:	4b38      	ldr	r3, [pc, #224]	; (8003504 <HAL_RCC_GetSysClockFreq+0x200>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	099b      	lsrs	r3, r3, #6
 8003428:	2200      	movs	r2, #0
 800342a:	4618      	mov	r0, r3
 800342c:	4611      	mov	r1, r2
 800342e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003432:	623b      	str	r3, [r7, #32]
 8003434:	2300      	movs	r3, #0
 8003436:	627b      	str	r3, [r7, #36]	; 0x24
 8003438:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800343c:	4642      	mov	r2, r8
 800343e:	464b      	mov	r3, r9
 8003440:	f04f 0000 	mov.w	r0, #0
 8003444:	f04f 0100 	mov.w	r1, #0
 8003448:	0159      	lsls	r1, r3, #5
 800344a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800344e:	0150      	lsls	r0, r2, #5
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4641      	mov	r1, r8
 8003456:	ebb2 0a01 	subs.w	sl, r2, r1
 800345a:	4649      	mov	r1, r9
 800345c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800346c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003470:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003474:	ebb2 040a 	subs.w	r4, r2, sl
 8003478:	eb63 050b 	sbc.w	r5, r3, fp
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	00eb      	lsls	r3, r5, #3
 8003486:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800348a:	00e2      	lsls	r2, r4, #3
 800348c:	4614      	mov	r4, r2
 800348e:	461d      	mov	r5, r3
 8003490:	4643      	mov	r3, r8
 8003492:	18e3      	adds	r3, r4, r3
 8003494:	603b      	str	r3, [r7, #0]
 8003496:	464b      	mov	r3, r9
 8003498:	eb45 0303 	adc.w	r3, r5, r3
 800349c:	607b      	str	r3, [r7, #4]
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034aa:	4629      	mov	r1, r5
 80034ac:	028b      	lsls	r3, r1, #10
 80034ae:	4621      	mov	r1, r4
 80034b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034b4:	4621      	mov	r1, r4
 80034b6:	028a      	lsls	r2, r1, #10
 80034b8:	4610      	mov	r0, r2
 80034ba:	4619      	mov	r1, r3
 80034bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034be:	2200      	movs	r2, #0
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	61fa      	str	r2, [r7, #28]
 80034c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034c8:	f7fd f9f0 	bl	80008ac <__aeabi_uldivmod>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4613      	mov	r3, r2
 80034d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_RCC_GetSysClockFreq+0x200>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	0c1b      	lsrs	r3, r3, #16
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	3301      	adds	r3, #1
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80034e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034ee:	e002      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <HAL_RCC_GetSysClockFreq+0x204>)
 80034f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3750      	adds	r7, #80	; 0x50
 80034fc:	46bd      	mov	sp, r7
 80034fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800
 8003508:	00f42400 	.word	0x00f42400
 800350c:	007a1200 	.word	0x007a1200

08003510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003514:	4b03      	ldr	r3, [pc, #12]	; (8003524 <HAL_RCC_GetHCLKFreq+0x14>)
 8003516:	681b      	ldr	r3, [r3, #0]
}
 8003518:	4618      	mov	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	20000004 	.word	0x20000004

08003528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800352c:	f7ff fff0 	bl	8003510 <HAL_RCC_GetHCLKFreq>
 8003530:	4602      	mov	r2, r0
 8003532:	4b05      	ldr	r3, [pc, #20]	; (8003548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	0a9b      	lsrs	r3, r3, #10
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	4903      	ldr	r1, [pc, #12]	; (800354c <HAL_RCC_GetPCLK1Freq+0x24>)
 800353e:	5ccb      	ldrb	r3, [r1, r3]
 8003540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003544:	4618      	mov	r0, r3
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40023800 	.word	0x40023800
 800354c:	08005d18 	.word	0x08005d18

08003550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003554:	f7ff ffdc 	bl	8003510 <HAL_RCC_GetHCLKFreq>
 8003558:	4602      	mov	r2, r0
 800355a:	4b05      	ldr	r3, [pc, #20]	; (8003570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	0b5b      	lsrs	r3, r3, #13
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	4903      	ldr	r1, [pc, #12]	; (8003574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003566:	5ccb      	ldrb	r3, [r1, r3]
 8003568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800356c:	4618      	mov	r0, r3
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40023800 	.word	0x40023800
 8003574:	08005d18 	.word	0x08005d18

08003578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e041      	b.n	800360e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fe f9b4 	bl	800190c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3304      	adds	r3, #4
 80035b4:	4619      	mov	r1, r3
 80035b6:	4610      	mov	r0, r2
 80035b8:	f000 fb1c 	bl	8003bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d001      	beq.n	8003630 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e03c      	b.n	80036aa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a1e      	ldr	r2, [pc, #120]	; (80036b8 <HAL_TIM_Base_Start+0xa0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d018      	beq.n	8003674 <HAL_TIM_Base_Start+0x5c>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364a:	d013      	beq.n	8003674 <HAL_TIM_Base_Start+0x5c>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a1a      	ldr	r2, [pc, #104]	; (80036bc <HAL_TIM_Base_Start+0xa4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00e      	beq.n	8003674 <HAL_TIM_Base_Start+0x5c>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a19      	ldr	r2, [pc, #100]	; (80036c0 <HAL_TIM_Base_Start+0xa8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d009      	beq.n	8003674 <HAL_TIM_Base_Start+0x5c>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a17      	ldr	r2, [pc, #92]	; (80036c4 <HAL_TIM_Base_Start+0xac>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d004      	beq.n	8003674 <HAL_TIM_Base_Start+0x5c>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a16      	ldr	r2, [pc, #88]	; (80036c8 <HAL_TIM_Base_Start+0xb0>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d111      	bne.n	8003698 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b06      	cmp	r3, #6
 8003684:	d010      	beq.n	80036a8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0201 	orr.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003696:	e007      	b.n	80036a8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40010000 	.word	0x40010000
 80036bc:	40000400 	.word	0x40000400
 80036c0:	40000800 	.word	0x40000800
 80036c4:	40000c00 	.word	0x40000c00
 80036c8:	40014000 	.word	0x40014000

080036cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e041      	b.n	8003762 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f839 	bl	800376a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3304      	adds	r3, #4
 8003708:	4619      	mov	r1, r3
 800370a:	4610      	mov	r0, r2
 800370c:	f000 fa72 	bl	8003bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
	...

08003780 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d109      	bne.n	80037a4 <HAL_TIM_PWM_Start+0x24>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b01      	cmp	r3, #1
 800379a:	bf14      	ite	ne
 800379c:	2301      	movne	r3, #1
 800379e:	2300      	moveq	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	e022      	b.n	80037ea <HAL_TIM_PWM_Start+0x6a>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d109      	bne.n	80037be <HAL_TIM_PWM_Start+0x3e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	bf14      	ite	ne
 80037b6:	2301      	movne	r3, #1
 80037b8:	2300      	moveq	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	e015      	b.n	80037ea <HAL_TIM_PWM_Start+0x6a>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d109      	bne.n	80037d8 <HAL_TIM_PWM_Start+0x58>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	bf14      	ite	ne
 80037d0:	2301      	movne	r3, #1
 80037d2:	2300      	moveq	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	e008      	b.n	80037ea <HAL_TIM_PWM_Start+0x6a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	bf14      	ite	ne
 80037e4:	2301      	movne	r3, #1
 80037e6:	2300      	moveq	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e068      	b.n	80038c4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d104      	bne.n	8003802 <HAL_TIM_PWM_Start+0x82>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003800:	e013      	b.n	800382a <HAL_TIM_PWM_Start+0xaa>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b04      	cmp	r3, #4
 8003806:	d104      	bne.n	8003812 <HAL_TIM_PWM_Start+0x92>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003810:	e00b      	b.n	800382a <HAL_TIM_PWM_Start+0xaa>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b08      	cmp	r3, #8
 8003816:	d104      	bne.n	8003822 <HAL_TIM_PWM_Start+0xa2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003820:	e003      	b.n	800382a <HAL_TIM_PWM_Start+0xaa>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2202      	movs	r2, #2
 8003826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2201      	movs	r2, #1
 8003830:	6839      	ldr	r1, [r7, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fc84 	bl	8004140 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a23      	ldr	r2, [pc, #140]	; (80038cc <HAL_TIM_PWM_Start+0x14c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d107      	bne.n	8003852 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003850:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1d      	ldr	r2, [pc, #116]	; (80038cc <HAL_TIM_PWM_Start+0x14c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d018      	beq.n	800388e <HAL_TIM_PWM_Start+0x10e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003864:	d013      	beq.n	800388e <HAL_TIM_PWM_Start+0x10e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a19      	ldr	r2, [pc, #100]	; (80038d0 <HAL_TIM_PWM_Start+0x150>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00e      	beq.n	800388e <HAL_TIM_PWM_Start+0x10e>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a17      	ldr	r2, [pc, #92]	; (80038d4 <HAL_TIM_PWM_Start+0x154>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d009      	beq.n	800388e <HAL_TIM_PWM_Start+0x10e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a16      	ldr	r2, [pc, #88]	; (80038d8 <HAL_TIM_PWM_Start+0x158>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d004      	beq.n	800388e <HAL_TIM_PWM_Start+0x10e>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a14      	ldr	r2, [pc, #80]	; (80038dc <HAL_TIM_PWM_Start+0x15c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d111      	bne.n	80038b2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2b06      	cmp	r3, #6
 800389e:	d010      	beq.n	80038c2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b0:	e007      	b.n	80038c2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f042 0201 	orr.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40010000 	.word	0x40010000
 80038d0:	40000400 	.word	0x40000400
 80038d4:	40000800 	.word	0x40000800
 80038d8:	40000c00 	.word	0x40000c00
 80038dc:	40014000 	.word	0x40014000

080038e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e0ae      	b.n	8003a5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b0c      	cmp	r3, #12
 800390a:	f200 809f 	bhi.w	8003a4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800390e:	a201      	add	r2, pc, #4	; (adr r2, 8003914 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003914:	08003949 	.word	0x08003949
 8003918:	08003a4d 	.word	0x08003a4d
 800391c:	08003a4d 	.word	0x08003a4d
 8003920:	08003a4d 	.word	0x08003a4d
 8003924:	08003989 	.word	0x08003989
 8003928:	08003a4d 	.word	0x08003a4d
 800392c:	08003a4d 	.word	0x08003a4d
 8003930:	08003a4d 	.word	0x08003a4d
 8003934:	080039cb 	.word	0x080039cb
 8003938:	08003a4d 	.word	0x08003a4d
 800393c:	08003a4d 	.word	0x08003a4d
 8003940:	08003a4d 	.word	0x08003a4d
 8003944:	08003a0b 	.word	0x08003a0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	4618      	mov	r0, r3
 8003950:	f000 f9d0 	bl	8003cf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0208 	orr.w	r2, r2, #8
 8003962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0204 	bic.w	r2, r2, #4
 8003972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6999      	ldr	r1, [r3, #24]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	619a      	str	r2, [r3, #24]
      break;
 8003986:	e064      	b.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68b9      	ldr	r1, [r7, #8]
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fa16 	bl	8003dc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6999      	ldr	r1, [r3, #24]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	021a      	lsls	r2, r3, #8
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	619a      	str	r2, [r3, #24]
      break;
 80039c8:	e043      	b.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fa61 	bl	8003e98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69da      	ldr	r2, [r3, #28]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0208 	orr.w	r2, r2, #8
 80039e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69da      	ldr	r2, [r3, #28]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0204 	bic.w	r2, r2, #4
 80039f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69d9      	ldr	r1, [r3, #28]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	61da      	str	r2, [r3, #28]
      break;
 8003a08:	e023      	b.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 faab 	bl	8003f6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69da      	ldr	r2, [r3, #28]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69da      	ldr	r2, [r3, #28]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69d9      	ldr	r1, [r3, #28]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	021a      	lsls	r2, r3, #8
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	61da      	str	r2, [r3, #28]
      break;
 8003a4a:	e002      	b.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_TIM_ConfigClockSource+0x1c>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e0b4      	b.n	8003bea <HAL_TIM_ConfigClockSource+0x186>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab8:	d03e      	beq.n	8003b38 <HAL_TIM_ConfigClockSource+0xd4>
 8003aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003abe:	f200 8087 	bhi.w	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac6:	f000 8086 	beq.w	8003bd6 <HAL_TIM_ConfigClockSource+0x172>
 8003aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ace:	d87f      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad0:	2b70      	cmp	r3, #112	; 0x70
 8003ad2:	d01a      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0xa6>
 8003ad4:	2b70      	cmp	r3, #112	; 0x70
 8003ad6:	d87b      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad8:	2b60      	cmp	r3, #96	; 0x60
 8003ada:	d050      	beq.n	8003b7e <HAL_TIM_ConfigClockSource+0x11a>
 8003adc:	2b60      	cmp	r3, #96	; 0x60
 8003ade:	d877      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae0:	2b50      	cmp	r3, #80	; 0x50
 8003ae2:	d03c      	beq.n	8003b5e <HAL_TIM_ConfigClockSource+0xfa>
 8003ae4:	2b50      	cmp	r3, #80	; 0x50
 8003ae6:	d873      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae8:	2b40      	cmp	r3, #64	; 0x40
 8003aea:	d058      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x13a>
 8003aec:	2b40      	cmp	r3, #64	; 0x40
 8003aee:	d86f      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003af0:	2b30      	cmp	r3, #48	; 0x30
 8003af2:	d064      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x15a>
 8003af4:	2b30      	cmp	r3, #48	; 0x30
 8003af6:	d86b      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	d060      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x15a>
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	d867      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d05c      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x15a>
 8003b04:	2b10      	cmp	r3, #16
 8003b06:	d05a      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x15a>
 8003b08:	e062      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	6899      	ldr	r1, [r3, #8]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f000 faf1 	bl	8004100 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	609a      	str	r2, [r3, #8]
      break;
 8003b36:	e04f      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6818      	ldr	r0, [r3, #0]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	6899      	ldr	r1, [r3, #8]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f000 fada 	bl	8004100 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b5a:	609a      	str	r2, [r3, #8]
      break;
 8003b5c:	e03c      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6818      	ldr	r0, [r3, #0]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	6859      	ldr	r1, [r3, #4]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f000 fa4e 	bl	800400c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2150      	movs	r1, #80	; 0x50
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 faa7 	bl	80040ca <TIM_ITRx_SetConfig>
      break;
 8003b7c:	e02c      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6859      	ldr	r1, [r3, #4]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	f000 fa6d 	bl	800406a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2160      	movs	r1, #96	; 0x60
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fa97 	bl	80040ca <TIM_ITRx_SetConfig>
      break;
 8003b9c:	e01c      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	6859      	ldr	r1, [r3, #4]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	461a      	mov	r2, r3
 8003bac:	f000 fa2e 	bl	800400c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2140      	movs	r1, #64	; 0x40
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fa87 	bl	80040ca <TIM_ITRx_SetConfig>
      break;
 8003bbc:	e00c      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4610      	mov	r0, r2
 8003bca:	f000 fa7e 	bl	80040ca <TIM_ITRx_SetConfig>
      break;
 8003bce:	e003      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd4:	e000      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a34      	ldr	r2, [pc, #208]	; (8003cd8 <TIM_Base_SetConfig+0xe4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d00f      	beq.n	8003c2c <TIM_Base_SetConfig+0x38>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c12:	d00b      	beq.n	8003c2c <TIM_Base_SetConfig+0x38>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a31      	ldr	r2, [pc, #196]	; (8003cdc <TIM_Base_SetConfig+0xe8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d007      	beq.n	8003c2c <TIM_Base_SetConfig+0x38>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a30      	ldr	r2, [pc, #192]	; (8003ce0 <TIM_Base_SetConfig+0xec>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d003      	beq.n	8003c2c <TIM_Base_SetConfig+0x38>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a2f      	ldr	r2, [pc, #188]	; (8003ce4 <TIM_Base_SetConfig+0xf0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d108      	bne.n	8003c3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a25      	ldr	r2, [pc, #148]	; (8003cd8 <TIM_Base_SetConfig+0xe4>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d01b      	beq.n	8003c7e <TIM_Base_SetConfig+0x8a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c4c:	d017      	beq.n	8003c7e <TIM_Base_SetConfig+0x8a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a22      	ldr	r2, [pc, #136]	; (8003cdc <TIM_Base_SetConfig+0xe8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d013      	beq.n	8003c7e <TIM_Base_SetConfig+0x8a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a21      	ldr	r2, [pc, #132]	; (8003ce0 <TIM_Base_SetConfig+0xec>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00f      	beq.n	8003c7e <TIM_Base_SetConfig+0x8a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a20      	ldr	r2, [pc, #128]	; (8003ce4 <TIM_Base_SetConfig+0xf0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00b      	beq.n	8003c7e <TIM_Base_SetConfig+0x8a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a1f      	ldr	r2, [pc, #124]	; (8003ce8 <TIM_Base_SetConfig+0xf4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d007      	beq.n	8003c7e <TIM_Base_SetConfig+0x8a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a1e      	ldr	r2, [pc, #120]	; (8003cec <TIM_Base_SetConfig+0xf8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d003      	beq.n	8003c7e <TIM_Base_SetConfig+0x8a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a1d      	ldr	r2, [pc, #116]	; (8003cf0 <TIM_Base_SetConfig+0xfc>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d108      	bne.n	8003c90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a08      	ldr	r2, [pc, #32]	; (8003cd8 <TIM_Base_SetConfig+0xe4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d103      	bne.n	8003cc4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	615a      	str	r2, [r3, #20]
}
 8003cca:	bf00      	nop
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40010000 	.word	0x40010000
 8003cdc:	40000400 	.word	0x40000400
 8003ce0:	40000800 	.word	0x40000800
 8003ce4:	40000c00 	.word	0x40000c00
 8003ce8:	40014000 	.word	0x40014000
 8003cec:	40014400 	.word	0x40014400
 8003cf0:	40014800 	.word	0x40014800

08003cf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	f023 0201 	bic.w	r2, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0303 	bic.w	r3, r3, #3
 8003d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f023 0302 	bic.w	r3, r3, #2
 8003d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a1c      	ldr	r2, [pc, #112]	; (8003dbc <TIM_OC1_SetConfig+0xc8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d10c      	bne.n	8003d6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f023 0308 	bic.w	r3, r3, #8
 8003d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f023 0304 	bic.w	r3, r3, #4
 8003d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a13      	ldr	r2, [pc, #76]	; (8003dbc <TIM_OC1_SetConfig+0xc8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d111      	bne.n	8003d96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	621a      	str	r2, [r3, #32]
}
 8003db0:	bf00      	nop
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	40010000 	.word	0x40010000

08003dc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	f023 0210 	bic.w	r2, r3, #16
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	021b      	lsls	r3, r3, #8
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f023 0320 	bic.w	r3, r3, #32
 8003e0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a1e      	ldr	r2, [pc, #120]	; (8003e94 <TIM_OC2_SetConfig+0xd4>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d10d      	bne.n	8003e3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a15      	ldr	r2, [pc, #84]	; (8003e94 <TIM_OC2_SetConfig+0xd4>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d113      	bne.n	8003e6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	621a      	str	r2, [r3, #32]
}
 8003e86:	bf00      	nop
 8003e88:	371c      	adds	r7, #28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40010000 	.word	0x40010000

08003e98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0303 	bic.w	r3, r3, #3
 8003ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	021b      	lsls	r3, r3, #8
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a1d      	ldr	r2, [pc, #116]	; (8003f68 <TIM_OC3_SetConfig+0xd0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d10d      	bne.n	8003f12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003efc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	021b      	lsls	r3, r3, #8
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a14      	ldr	r2, [pc, #80]	; (8003f68 <TIM_OC3_SetConfig+0xd0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d113      	bne.n	8003f42 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	621a      	str	r2, [r3, #32]
}
 8003f5c:	bf00      	nop
 8003f5e:	371c      	adds	r7, #28
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	40010000 	.word	0x40010000

08003f6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	021b      	lsls	r3, r3, #8
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	031b      	lsls	r3, r3, #12
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a10      	ldr	r2, [pc, #64]	; (8004008 <TIM_OC4_SetConfig+0x9c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d109      	bne.n	8003fe0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	019b      	lsls	r3, r3, #6
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	621a      	str	r2, [r3, #32]
}
 8003ffa:	bf00      	nop
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40010000 	.word	0x40010000

0800400c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	f023 0201 	bic.w	r2, r3, #1
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f023 030a 	bic.w	r3, r3, #10
 8004048:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	621a      	str	r2, [r3, #32]
}
 800405e:	bf00      	nop
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800406a:	b480      	push	{r7}
 800406c:	b087      	sub	sp, #28
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	f023 0210 	bic.w	r2, r3, #16
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004094:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	031b      	lsls	r3, r3, #12
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	621a      	str	r2, [r3, #32]
}
 80040be:	bf00      	nop
 80040c0:	371c      	adds	r7, #28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b085      	sub	sp, #20
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f043 0307 	orr.w	r3, r3, #7
 80040ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	609a      	str	r2, [r3, #8]
}
 80040f4:	bf00      	nop
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800411a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	021a      	lsls	r2, r3, #8
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	431a      	orrs	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4313      	orrs	r3, r2
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	609a      	str	r2, [r3, #8]
}
 8004134:	bf00      	nop
 8004136:	371c      	adds	r7, #28
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f003 031f 	and.w	r3, r3, #31
 8004152:	2201      	movs	r2, #1
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a1a      	ldr	r2, [r3, #32]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	43db      	mvns	r3, r3
 8004162:	401a      	ands	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a1a      	ldr	r2, [r3, #32]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f003 031f 	and.w	r3, r3, #31
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	fa01 f303 	lsl.w	r3, r1, r3
 8004178:	431a      	orrs	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	621a      	str	r2, [r3, #32]
}
 800417e:	bf00      	nop
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
	...

0800418c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e050      	b.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1c      	ldr	r2, [pc, #112]	; (8004254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d018      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f0:	d013      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a18      	ldr	r2, [pc, #96]	; (8004258 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00e      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a16      	ldr	r2, [pc, #88]	; (800425c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d009      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a15      	ldr	r2, [pc, #84]	; (8004260 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d004      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a13      	ldr	r2, [pc, #76]	; (8004264 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d10c      	bne.n	8004234 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004220:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	4313      	orrs	r3, r2
 800422a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40010000 	.word	0x40010000
 8004258:	40000400 	.word	0x40000400
 800425c:	40000800 	.word	0x40000800
 8004260:	40000c00 	.word	0x40000c00
 8004264:	40014000 	.word	0x40014000

08004268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e03f      	b.n	80042fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fd fb98 	bl	80019c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2224      	movs	r2, #36	; 0x24
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 fddf 	bl	8004e70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695a      	ldr	r2, [r3, #20]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68da      	ldr	r2, [r3, #12]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b08a      	sub	sp, #40	; 0x28
 8004306:	af02      	add	r7, sp, #8
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	603b      	str	r3, [r7, #0]
 800430e:	4613      	mov	r3, r2
 8004310:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b20      	cmp	r3, #32
 8004320:	d17c      	bne.n	800441c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <HAL_UART_Transmit+0x2c>
 8004328:	88fb      	ldrh	r3, [r7, #6]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e075      	b.n	800441e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_UART_Transmit+0x3e>
 800433c:	2302      	movs	r3, #2
 800433e:	e06e      	b.n	800441e <HAL_UART_Transmit+0x11c>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2221      	movs	r2, #33	; 0x21
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004356:	f7fd fcfb 	bl	8001d50 <HAL_GetTick>
 800435a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	88fa      	ldrh	r2, [r7, #6]
 8004360:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	88fa      	ldrh	r2, [r7, #6]
 8004366:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004370:	d108      	bne.n	8004384 <HAL_UART_Transmit+0x82>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d104      	bne.n	8004384 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	e003      	b.n	800438c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004388:	2300      	movs	r3, #0
 800438a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004394:	e02a      	b.n	80043ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2200      	movs	r2, #0
 800439e:	2180      	movs	r1, #128	; 0x80
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 fb1f 	bl	80049e4 <UART_WaitOnFlagUntilTimeout>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e036      	b.n	800441e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10b      	bne.n	80043ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	3302      	adds	r3, #2
 80043ca:	61bb      	str	r3, [r7, #24]
 80043cc:	e007      	b.n	80043de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	781a      	ldrb	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	3301      	adds	r3, #1
 80043dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1cf      	bne.n	8004396 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2200      	movs	r2, #0
 80043fe:	2140      	movs	r1, #64	; 0x40
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 faef 	bl	80049e4 <UART_WaitOnFlagUntilTimeout>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e006      	b.n	800441e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	e000      	b.n	800441e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800441c:	2302      	movs	r3, #2
  }
}
 800441e:	4618      	mov	r0, r3
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	4613      	mov	r3, r2
 8004432:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b20      	cmp	r3, #32
 800443e:	d11d      	bne.n	800447c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <HAL_UART_Receive_IT+0x26>
 8004446:	88fb      	ldrh	r3, [r7, #6]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e016      	b.n	800447e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_UART_Receive_IT+0x38>
 800445a:	2302      	movs	r3, #2
 800445c:	e00f      	b.n	800447e <HAL_UART_Receive_IT+0x58>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800446c:	88fb      	ldrh	r3, [r7, #6]
 800446e:	461a      	mov	r2, r3
 8004470:	68b9      	ldr	r1, [r7, #8]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 fb24 	bl	8004ac0 <UART_Start_Receive_IT>
 8004478:	4603      	mov	r3, r0
 800447a:	e000      	b.n	800447e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800447c:	2302      	movs	r3, #2
  }
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b0ba      	sub	sp, #232	; 0xe8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80044c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10f      	bne.n	80044ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d009      	beq.n	80044ee <HAL_UART_IRQHandler+0x66>
 80044da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044de:	f003 0320 	and.w	r3, r3, #32
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fc07 	bl	8004cfa <UART_Receive_IT>
      return;
 80044ec:	e256      	b.n	800499c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80044ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 80de 	beq.w	80046b4 <HAL_UART_IRQHandler+0x22c>
 80044f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d106      	bne.n	8004512 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004508:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 80d1 	beq.w	80046b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00b      	beq.n	8004536 <HAL_UART_IRQHandler+0xae>
 800451e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	f043 0201 	orr.w	r2, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00b      	beq.n	800455a <HAL_UART_IRQHandler+0xd2>
 8004542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	f043 0202 	orr.w	r2, r3, #2
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800455a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00b      	beq.n	800457e <HAL_UART_IRQHandler+0xf6>
 8004566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f043 0204 	orr.w	r2, r3, #4
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800457e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b00      	cmp	r3, #0
 8004588:	d011      	beq.n	80045ae <HAL_UART_IRQHandler+0x126>
 800458a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b00      	cmp	r3, #0
 8004594:	d105      	bne.n	80045a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d005      	beq.n	80045ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	f043 0208 	orr.w	r2, r3, #8
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 81ed 	beq.w	8004992 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d008      	beq.n	80045d6 <HAL_UART_IRQHandler+0x14e>
 80045c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c8:	f003 0320 	and.w	r3, r3, #32
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 fb92 	bl	8004cfa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e0:	2b40      	cmp	r3, #64	; 0x40
 80045e2:	bf0c      	ite	eq
 80045e4:	2301      	moveq	r3, #1
 80045e6:	2300      	movne	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d103      	bne.n	8004602 <HAL_UART_IRQHandler+0x17a>
 80045fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d04f      	beq.n	80046a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fa9a 	bl	8004b3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004612:	2b40      	cmp	r3, #64	; 0x40
 8004614:	d141      	bne.n	800469a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3314      	adds	r3, #20
 800461c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004624:	e853 3f00 	ldrex	r3, [r3]
 8004628:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800462c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	3314      	adds	r3, #20
 800463e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004642:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004646:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800464e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004652:	e841 2300 	strex	r3, r2, [r1]
 8004656:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800465a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1d9      	bne.n	8004616 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004666:	2b00      	cmp	r3, #0
 8004668:	d013      	beq.n	8004692 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466e:	4a7d      	ldr	r2, [pc, #500]	; (8004864 <HAL_UART_IRQHandler+0x3dc>)
 8004670:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	4618      	mov	r0, r3
 8004678:	f7fe f90d 	bl	8002896 <HAL_DMA_Abort_IT>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d016      	beq.n	80046b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800468c:	4610      	mov	r0, r2
 800468e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004690:	e00e      	b.n	80046b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f990 	bl	80049b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004698:	e00a      	b.n	80046b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f98c 	bl	80049b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a0:	e006      	b.n	80046b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f988 	bl	80049b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80046ae:	e170      	b.n	8004992 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b0:	bf00      	nop
    return;
 80046b2:	e16e      	b.n	8004992 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	f040 814a 	bne.w	8004952 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c2:	f003 0310 	and.w	r3, r3, #16
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 8143 	beq.w	8004952 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 813c 	beq.w	8004952 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046da:	2300      	movs	r3, #0
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	60bb      	str	r3, [r7, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	60bb      	str	r3, [r7, #8]
 80046ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fa:	2b40      	cmp	r3, #64	; 0x40
 80046fc:	f040 80b4 	bne.w	8004868 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800470c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 8140 	beq.w	8004996 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800471a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800471e:	429a      	cmp	r2, r3
 8004720:	f080 8139 	bcs.w	8004996 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800472a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004736:	f000 8088 	beq.w	800484a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	330c      	adds	r3, #12
 8004740:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004744:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004748:	e853 3f00 	ldrex	r3, [r3]
 800474c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004750:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004758:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	330c      	adds	r3, #12
 8004762:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004766:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800476a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004772:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004776:	e841 2300 	strex	r3, r2, [r1]
 800477a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800477e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1d9      	bne.n	800473a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3314      	adds	r3, #20
 800478c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004790:	e853 3f00 	ldrex	r3, [r3]
 8004794:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004796:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004798:	f023 0301 	bic.w	r3, r3, #1
 800479c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3314      	adds	r3, #20
 80047a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047b6:	e841 2300 	strex	r3, r2, [r1]
 80047ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1e1      	bne.n	8004786 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3314      	adds	r3, #20
 80047c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047cc:	e853 3f00 	ldrex	r3, [r3]
 80047d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80047d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3314      	adds	r3, #20
 80047e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80047e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047ee:	e841 2300 	strex	r3, r2, [r1]
 80047f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1e3      	bne.n	80047c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	330c      	adds	r3, #12
 800480e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004812:	e853 3f00 	ldrex	r3, [r3]
 8004816:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481a:	f023 0310 	bic.w	r3, r3, #16
 800481e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	330c      	adds	r3, #12
 8004828:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800482c:	65ba      	str	r2, [r7, #88]	; 0x58
 800482e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004832:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800483a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e3      	bne.n	8004808 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004844:	4618      	mov	r0, r3
 8004846:	f7fd ffb6 	bl	80027b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004852:	b29b      	uxth	r3, r3
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	b29b      	uxth	r3, r3
 8004858:	4619      	mov	r1, r3
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f8b6 	bl	80049cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004860:	e099      	b.n	8004996 <HAL_UART_IRQHandler+0x50e>
 8004862:	bf00      	nop
 8004864:	08004c03 	.word	0x08004c03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004870:	b29b      	uxth	r3, r3
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800487c:	b29b      	uxth	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 808b 	beq.w	800499a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004884:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 8086 	beq.w	800499a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	330c      	adds	r3, #12
 8004894:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800489e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	330c      	adds	r3, #12
 80048ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80048b2:	647a      	str	r2, [r7, #68]	; 0x44
 80048b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1e3      	bne.n	800488e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3314      	adds	r3, #20
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	e853 3f00 	ldrex	r3, [r3]
 80048d4:	623b      	str	r3, [r7, #32]
   return(result);
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	f023 0301 	bic.w	r3, r3, #1
 80048dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3314      	adds	r3, #20
 80048e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80048ea:	633a      	str	r2, [r7, #48]	; 0x30
 80048ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1e3      	bne.n	80048c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	330c      	adds	r3, #12
 8004912:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	e853 3f00 	ldrex	r3, [r3]
 800491a:	60fb      	str	r3, [r7, #12]
   return(result);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0310 	bic.w	r3, r3, #16
 8004922:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	330c      	adds	r3, #12
 800492c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004930:	61fa      	str	r2, [r7, #28]
 8004932:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	69b9      	ldr	r1, [r7, #24]
 8004936:	69fa      	ldr	r2, [r7, #28]
 8004938:	e841 2300 	strex	r3, r2, [r1]
 800493c:	617b      	str	r3, [r7, #20]
   return(result);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e3      	bne.n	800490c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004944:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004948:	4619      	mov	r1, r3
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f83e 	bl	80049cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004950:	e023      	b.n	800499a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495a:	2b00      	cmp	r3, #0
 800495c:	d009      	beq.n	8004972 <HAL_UART_IRQHandler+0x4ea>
 800495e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f95d 	bl	8004c2a <UART_Transmit_IT>
    return;
 8004970:	e014      	b.n	800499c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00e      	beq.n	800499c <HAL_UART_IRQHandler+0x514>
 800497e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004986:	2b00      	cmp	r3, #0
 8004988:	d008      	beq.n	800499c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f99d 	bl	8004cca <UART_EndTransmit_IT>
    return;
 8004990:	e004      	b.n	800499c <HAL_UART_IRQHandler+0x514>
    return;
 8004992:	bf00      	nop
 8004994:	e002      	b.n	800499c <HAL_UART_IRQHandler+0x514>
      return;
 8004996:	bf00      	nop
 8004998:	e000      	b.n	800499c <HAL_UART_IRQHandler+0x514>
      return;
 800499a:	bf00      	nop
  }
}
 800499c:	37e8      	adds	r7, #232	; 0xe8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop

080049a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b090      	sub	sp, #64	; 0x40
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	603b      	str	r3, [r7, #0]
 80049f0:	4613      	mov	r3, r2
 80049f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049f4:	e050      	b.n	8004a98 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fc:	d04c      	beq.n	8004a98 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d007      	beq.n	8004a14 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a04:	f7fd f9a4 	bl	8001d50 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d241      	bcs.n	8004a98 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	330c      	adds	r3, #12
 8004a1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	330c      	adds	r3, #12
 8004a32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a34:	637a      	str	r2, [r7, #52]	; 0x34
 8004a36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e5      	bne.n	8004a14 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3314      	adds	r3, #20
 8004a4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	e853 3f00 	ldrex	r3, [r3]
 8004a56:	613b      	str	r3, [r7, #16]
   return(result);
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	f023 0301 	bic.w	r3, r3, #1
 8004a5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3314      	adds	r3, #20
 8004a66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a68:	623a      	str	r2, [r7, #32]
 8004a6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6c:	69f9      	ldr	r1, [r7, #28]
 8004a6e:	6a3a      	ldr	r2, [r7, #32]
 8004a70:	e841 2300 	strex	r3, r2, [r1]
 8004a74:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e5      	bne.n	8004a48 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e00f      	b.n	8004ab8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	bf0c      	ite	eq
 8004aa8:	2301      	moveq	r3, #1
 8004aaa:	2300      	movne	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d09f      	beq.n	80049f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3740      	adds	r7, #64	; 0x40
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	4613      	mov	r3, r2
 8004acc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	88fa      	ldrh	r2, [r7, #6]
 8004ad8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	88fa      	ldrh	r2, [r7, #6]
 8004ade:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2222      	movs	r2, #34	; 0x22
 8004aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d007      	beq.n	8004b0e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b0c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695a      	ldr	r2, [r3, #20]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f042 0201 	orr.w	r2, r2, #1
 8004b1c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0220 	orr.w	r2, r2, #32
 8004b2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b095      	sub	sp, #84	; 0x54
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	330c      	adds	r3, #12
 8004b4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b4e:	e853 3f00 	ldrex	r3, [r3]
 8004b52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	330c      	adds	r3, #12
 8004b62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b64:	643a      	str	r2, [r7, #64]	; 0x40
 8004b66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b6c:	e841 2300 	strex	r3, r2, [r1]
 8004b70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1e5      	bne.n	8004b44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3314      	adds	r3, #20
 8004b7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	e853 3f00 	ldrex	r3, [r3]
 8004b86:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f023 0301 	bic.w	r3, r3, #1
 8004b8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3314      	adds	r3, #20
 8004b96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ba0:	e841 2300 	strex	r3, r2, [r1]
 8004ba4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1e5      	bne.n	8004b78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d119      	bne.n	8004be8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	330c      	adds	r3, #12
 8004bba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f023 0310 	bic.w	r3, r3, #16
 8004bca:	647b      	str	r3, [r7, #68]	; 0x44
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	330c      	adds	r3, #12
 8004bd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bd4:	61ba      	str	r2, [r7, #24]
 8004bd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	6979      	ldr	r1, [r7, #20]
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	613b      	str	r3, [r7, #16]
   return(result);
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e5      	bne.n	8004bb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004bf6:	bf00      	nop
 8004bf8:	3754      	adds	r7, #84	; 0x54
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f7ff fecb 	bl	80049b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c22:	bf00      	nop
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b085      	sub	sp, #20
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b21      	cmp	r3, #33	; 0x21
 8004c3c:	d13e      	bne.n	8004cbc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c46:	d114      	bne.n	8004c72 <UART_Transmit_IT+0x48>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d110      	bne.n	8004c72 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	1c9a      	adds	r2, r3, #2
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	621a      	str	r2, [r3, #32]
 8004c70:	e008      	b.n	8004c84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	1c59      	adds	r1, r3, #1
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6211      	str	r1, [r2, #32]
 8004c7c:	781a      	ldrb	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	4619      	mov	r1, r3
 8004c92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10f      	bne.n	8004cb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68da      	ldr	r2, [r3, #12]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ca6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	e000      	b.n	8004cbe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cbc:	2302      	movs	r3, #2
  }
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ce0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7ff fe5a 	bl	80049a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b08c      	sub	sp, #48	; 0x30
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b22      	cmp	r3, #34	; 0x22
 8004d0c:	f040 80ab 	bne.w	8004e66 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d18:	d117      	bne.n	8004d4a <UART_Receive_IT+0x50>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d113      	bne.n	8004d4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d22:	2300      	movs	r3, #0
 8004d24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d42:	1c9a      	adds	r2, r3, #2
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	629a      	str	r2, [r3, #40]	; 0x28
 8004d48:	e026      	b.n	8004d98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d50:	2300      	movs	r3, #0
 8004d52:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5c:	d007      	beq.n	8004d6e <UART_Receive_IT+0x74>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10a      	bne.n	8004d7c <UART_Receive_IT+0x82>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d78:	701a      	strb	r2, [r3, #0]
 8004d7a:	e008      	b.n	8004d8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	4619      	mov	r1, r3
 8004da6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d15a      	bne.n	8004e62 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0220 	bic.w	r2, r2, #32
 8004dba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695a      	ldr	r2, [r3, #20]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0201 	bic.w	r2, r2, #1
 8004dda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d135      	bne.n	8004e58 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	330c      	adds	r3, #12
 8004df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	e853 3f00 	ldrex	r3, [r3]
 8004e00:	613b      	str	r3, [r7, #16]
   return(result);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f023 0310 	bic.w	r3, r3, #16
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	330c      	adds	r3, #12
 8004e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e12:	623a      	str	r2, [r7, #32]
 8004e14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	69f9      	ldr	r1, [r7, #28]
 8004e18:	6a3a      	ldr	r2, [r7, #32]
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e5      	bne.n	8004df2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0310 	and.w	r3, r3, #16
 8004e30:	2b10      	cmp	r3, #16
 8004e32:	d10a      	bne.n	8004e4a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e34:	2300      	movs	r3, #0
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e4e:	4619      	mov	r1, r3
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7ff fdbb 	bl	80049cc <HAL_UARTEx_RxEventCallback>
 8004e56:	e002      	b.n	8004e5e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7fc fcb3 	bl	80017c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	e002      	b.n	8004e68 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004e62:	2300      	movs	r3, #0
 8004e64:	e000      	b.n	8004e68 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004e66:	2302      	movs	r3, #2
  }
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3730      	adds	r7, #48	; 0x30
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e74:	b0c0      	sub	sp, #256	; 0x100
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8c:	68d9      	ldr	r1, [r3, #12]
 8004e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	ea40 0301 	orr.w	r3, r0, r1
 8004e98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ec8:	f021 010c 	bic.w	r1, r1, #12
 8004ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ed6:	430b      	orrs	r3, r1
 8004ed8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eea:	6999      	ldr	r1, [r3, #24]
 8004eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	ea40 0301 	orr.w	r3, r0, r1
 8004ef6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	4b8f      	ldr	r3, [pc, #572]	; (800513c <UART_SetConfig+0x2cc>)
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d005      	beq.n	8004f10 <UART_SetConfig+0xa0>
 8004f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	4b8d      	ldr	r3, [pc, #564]	; (8005140 <UART_SetConfig+0x2d0>)
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d104      	bne.n	8004f1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f10:	f7fe fb1e 	bl	8003550 <HAL_RCC_GetPCLK2Freq>
 8004f14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f18:	e003      	b.n	8004f22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f1a:	f7fe fb05 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
 8004f1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f2c:	f040 810c 	bne.w	8005148 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f34:	2200      	movs	r2, #0
 8004f36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f42:	4622      	mov	r2, r4
 8004f44:	462b      	mov	r3, r5
 8004f46:	1891      	adds	r1, r2, r2
 8004f48:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f4a:	415b      	adcs	r3, r3
 8004f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f52:	4621      	mov	r1, r4
 8004f54:	eb12 0801 	adds.w	r8, r2, r1
 8004f58:	4629      	mov	r1, r5
 8004f5a:	eb43 0901 	adc.w	r9, r3, r1
 8004f5e:	f04f 0200 	mov.w	r2, #0
 8004f62:	f04f 0300 	mov.w	r3, #0
 8004f66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f72:	4690      	mov	r8, r2
 8004f74:	4699      	mov	r9, r3
 8004f76:	4623      	mov	r3, r4
 8004f78:	eb18 0303 	adds.w	r3, r8, r3
 8004f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f80:	462b      	mov	r3, r5
 8004f82:	eb49 0303 	adc.w	r3, r9, r3
 8004f86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	18db      	adds	r3, r3, r3
 8004fa2:	653b      	str	r3, [r7, #80]	; 0x50
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	eb42 0303 	adc.w	r3, r2, r3
 8004faa:	657b      	str	r3, [r7, #84]	; 0x54
 8004fac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004fb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004fb4:	f7fb fc7a 	bl	80008ac <__aeabi_uldivmod>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4b61      	ldr	r3, [pc, #388]	; (8005144 <UART_SetConfig+0x2d4>)
 8004fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	011c      	lsls	r4, r3, #4
 8004fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fd0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004fd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004fd8:	4642      	mov	r2, r8
 8004fda:	464b      	mov	r3, r9
 8004fdc:	1891      	adds	r1, r2, r2
 8004fde:	64b9      	str	r1, [r7, #72]	; 0x48
 8004fe0:	415b      	adcs	r3, r3
 8004fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fe4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004fe8:	4641      	mov	r1, r8
 8004fea:	eb12 0a01 	adds.w	sl, r2, r1
 8004fee:	4649      	mov	r1, r9
 8004ff0:	eb43 0b01 	adc.w	fp, r3, r1
 8004ff4:	f04f 0200 	mov.w	r2, #0
 8004ff8:	f04f 0300 	mov.w	r3, #0
 8004ffc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005000:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005004:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005008:	4692      	mov	sl, r2
 800500a:	469b      	mov	fp, r3
 800500c:	4643      	mov	r3, r8
 800500e:	eb1a 0303 	adds.w	r3, sl, r3
 8005012:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005016:	464b      	mov	r3, r9
 8005018:	eb4b 0303 	adc.w	r3, fp, r3
 800501c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800502c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005030:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005034:	460b      	mov	r3, r1
 8005036:	18db      	adds	r3, r3, r3
 8005038:	643b      	str	r3, [r7, #64]	; 0x40
 800503a:	4613      	mov	r3, r2
 800503c:	eb42 0303 	adc.w	r3, r2, r3
 8005040:	647b      	str	r3, [r7, #68]	; 0x44
 8005042:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005046:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800504a:	f7fb fc2f 	bl	80008ac <__aeabi_uldivmod>
 800504e:	4602      	mov	r2, r0
 8005050:	460b      	mov	r3, r1
 8005052:	4611      	mov	r1, r2
 8005054:	4b3b      	ldr	r3, [pc, #236]	; (8005144 <UART_SetConfig+0x2d4>)
 8005056:	fba3 2301 	umull	r2, r3, r3, r1
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	2264      	movs	r2, #100	; 0x64
 800505e:	fb02 f303 	mul.w	r3, r2, r3
 8005062:	1acb      	subs	r3, r1, r3
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800506a:	4b36      	ldr	r3, [pc, #216]	; (8005144 <UART_SetConfig+0x2d4>)
 800506c:	fba3 2302 	umull	r2, r3, r3, r2
 8005070:	095b      	lsrs	r3, r3, #5
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005078:	441c      	add	r4, r3
 800507a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800507e:	2200      	movs	r2, #0
 8005080:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005084:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005088:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800508c:	4642      	mov	r2, r8
 800508e:	464b      	mov	r3, r9
 8005090:	1891      	adds	r1, r2, r2
 8005092:	63b9      	str	r1, [r7, #56]	; 0x38
 8005094:	415b      	adcs	r3, r3
 8005096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005098:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800509c:	4641      	mov	r1, r8
 800509e:	1851      	adds	r1, r2, r1
 80050a0:	6339      	str	r1, [r7, #48]	; 0x30
 80050a2:	4649      	mov	r1, r9
 80050a4:	414b      	adcs	r3, r1
 80050a6:	637b      	str	r3, [r7, #52]	; 0x34
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80050b4:	4659      	mov	r1, fp
 80050b6:	00cb      	lsls	r3, r1, #3
 80050b8:	4651      	mov	r1, sl
 80050ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050be:	4651      	mov	r1, sl
 80050c0:	00ca      	lsls	r2, r1, #3
 80050c2:	4610      	mov	r0, r2
 80050c4:	4619      	mov	r1, r3
 80050c6:	4603      	mov	r3, r0
 80050c8:	4642      	mov	r2, r8
 80050ca:	189b      	adds	r3, r3, r2
 80050cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050d0:	464b      	mov	r3, r9
 80050d2:	460a      	mov	r2, r1
 80050d4:	eb42 0303 	adc.w	r3, r2, r3
 80050d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80050ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050f0:	460b      	mov	r3, r1
 80050f2:	18db      	adds	r3, r3, r3
 80050f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050f6:	4613      	mov	r3, r2
 80050f8:	eb42 0303 	adc.w	r3, r2, r3
 80050fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005102:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005106:	f7fb fbd1 	bl	80008ac <__aeabi_uldivmod>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	4b0d      	ldr	r3, [pc, #52]	; (8005144 <UART_SetConfig+0x2d4>)
 8005110:	fba3 1302 	umull	r1, r3, r3, r2
 8005114:	095b      	lsrs	r3, r3, #5
 8005116:	2164      	movs	r1, #100	; 0x64
 8005118:	fb01 f303 	mul.w	r3, r1, r3
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	3332      	adds	r3, #50	; 0x32
 8005122:	4a08      	ldr	r2, [pc, #32]	; (8005144 <UART_SetConfig+0x2d4>)
 8005124:	fba2 2303 	umull	r2, r3, r2, r3
 8005128:	095b      	lsrs	r3, r3, #5
 800512a:	f003 0207 	and.w	r2, r3, #7
 800512e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4422      	add	r2, r4
 8005136:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005138:	e105      	b.n	8005346 <UART_SetConfig+0x4d6>
 800513a:	bf00      	nop
 800513c:	40011000 	.word	0x40011000
 8005140:	40011400 	.word	0x40011400
 8005144:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800514c:	2200      	movs	r2, #0
 800514e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005152:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005156:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800515a:	4642      	mov	r2, r8
 800515c:	464b      	mov	r3, r9
 800515e:	1891      	adds	r1, r2, r2
 8005160:	6239      	str	r1, [r7, #32]
 8005162:	415b      	adcs	r3, r3
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
 8005166:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800516a:	4641      	mov	r1, r8
 800516c:	1854      	adds	r4, r2, r1
 800516e:	4649      	mov	r1, r9
 8005170:	eb43 0501 	adc.w	r5, r3, r1
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	00eb      	lsls	r3, r5, #3
 800517e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005182:	00e2      	lsls	r2, r4, #3
 8005184:	4614      	mov	r4, r2
 8005186:	461d      	mov	r5, r3
 8005188:	4643      	mov	r3, r8
 800518a:	18e3      	adds	r3, r4, r3
 800518c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005190:	464b      	mov	r3, r9
 8005192:	eb45 0303 	adc.w	r3, r5, r3
 8005196:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800519a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051aa:	f04f 0200 	mov.w	r2, #0
 80051ae:	f04f 0300 	mov.w	r3, #0
 80051b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80051b6:	4629      	mov	r1, r5
 80051b8:	008b      	lsls	r3, r1, #2
 80051ba:	4621      	mov	r1, r4
 80051bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051c0:	4621      	mov	r1, r4
 80051c2:	008a      	lsls	r2, r1, #2
 80051c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80051c8:	f7fb fb70 	bl	80008ac <__aeabi_uldivmod>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4b60      	ldr	r3, [pc, #384]	; (8005354 <UART_SetConfig+0x4e4>)
 80051d2:	fba3 2302 	umull	r2, r3, r3, r2
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	011c      	lsls	r4, r3, #4
 80051da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051de:	2200      	movs	r2, #0
 80051e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80051e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80051ec:	4642      	mov	r2, r8
 80051ee:	464b      	mov	r3, r9
 80051f0:	1891      	adds	r1, r2, r2
 80051f2:	61b9      	str	r1, [r7, #24]
 80051f4:	415b      	adcs	r3, r3
 80051f6:	61fb      	str	r3, [r7, #28]
 80051f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051fc:	4641      	mov	r1, r8
 80051fe:	1851      	adds	r1, r2, r1
 8005200:	6139      	str	r1, [r7, #16]
 8005202:	4649      	mov	r1, r9
 8005204:	414b      	adcs	r3, r1
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005214:	4659      	mov	r1, fp
 8005216:	00cb      	lsls	r3, r1, #3
 8005218:	4651      	mov	r1, sl
 800521a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800521e:	4651      	mov	r1, sl
 8005220:	00ca      	lsls	r2, r1, #3
 8005222:	4610      	mov	r0, r2
 8005224:	4619      	mov	r1, r3
 8005226:	4603      	mov	r3, r0
 8005228:	4642      	mov	r2, r8
 800522a:	189b      	adds	r3, r3, r2
 800522c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005230:	464b      	mov	r3, r9
 8005232:	460a      	mov	r2, r1
 8005234:	eb42 0303 	adc.w	r3, r2, r3
 8005238:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800523c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	67bb      	str	r3, [r7, #120]	; 0x78
 8005246:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	f04f 0300 	mov.w	r3, #0
 8005250:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005254:	4649      	mov	r1, r9
 8005256:	008b      	lsls	r3, r1, #2
 8005258:	4641      	mov	r1, r8
 800525a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800525e:	4641      	mov	r1, r8
 8005260:	008a      	lsls	r2, r1, #2
 8005262:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005266:	f7fb fb21 	bl	80008ac <__aeabi_uldivmod>
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	4b39      	ldr	r3, [pc, #228]	; (8005354 <UART_SetConfig+0x4e4>)
 8005270:	fba3 1302 	umull	r1, r3, r3, r2
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	2164      	movs	r1, #100	; 0x64
 8005278:	fb01 f303 	mul.w	r3, r1, r3
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	3332      	adds	r3, #50	; 0x32
 8005282:	4a34      	ldr	r2, [pc, #208]	; (8005354 <UART_SetConfig+0x4e4>)
 8005284:	fba2 2303 	umull	r2, r3, r2, r3
 8005288:	095b      	lsrs	r3, r3, #5
 800528a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800528e:	441c      	add	r4, r3
 8005290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005294:	2200      	movs	r2, #0
 8005296:	673b      	str	r3, [r7, #112]	; 0x70
 8005298:	677a      	str	r2, [r7, #116]	; 0x74
 800529a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800529e:	4642      	mov	r2, r8
 80052a0:	464b      	mov	r3, r9
 80052a2:	1891      	adds	r1, r2, r2
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	415b      	adcs	r3, r3
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052ae:	4641      	mov	r1, r8
 80052b0:	1851      	adds	r1, r2, r1
 80052b2:	6039      	str	r1, [r7, #0]
 80052b4:	4649      	mov	r1, r9
 80052b6:	414b      	adcs	r3, r1
 80052b8:	607b      	str	r3, [r7, #4]
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052c6:	4659      	mov	r1, fp
 80052c8:	00cb      	lsls	r3, r1, #3
 80052ca:	4651      	mov	r1, sl
 80052cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052d0:	4651      	mov	r1, sl
 80052d2:	00ca      	lsls	r2, r1, #3
 80052d4:	4610      	mov	r0, r2
 80052d6:	4619      	mov	r1, r3
 80052d8:	4603      	mov	r3, r0
 80052da:	4642      	mov	r2, r8
 80052dc:	189b      	adds	r3, r3, r2
 80052de:	66bb      	str	r3, [r7, #104]	; 0x68
 80052e0:	464b      	mov	r3, r9
 80052e2:	460a      	mov	r2, r1
 80052e4:	eb42 0303 	adc.w	r3, r2, r3
 80052e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	663b      	str	r3, [r7, #96]	; 0x60
 80052f4:	667a      	str	r2, [r7, #100]	; 0x64
 80052f6:	f04f 0200 	mov.w	r2, #0
 80052fa:	f04f 0300 	mov.w	r3, #0
 80052fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005302:	4649      	mov	r1, r9
 8005304:	008b      	lsls	r3, r1, #2
 8005306:	4641      	mov	r1, r8
 8005308:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800530c:	4641      	mov	r1, r8
 800530e:	008a      	lsls	r2, r1, #2
 8005310:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005314:	f7fb faca 	bl	80008ac <__aeabi_uldivmod>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	4b0d      	ldr	r3, [pc, #52]	; (8005354 <UART_SetConfig+0x4e4>)
 800531e:	fba3 1302 	umull	r1, r3, r3, r2
 8005322:	095b      	lsrs	r3, r3, #5
 8005324:	2164      	movs	r1, #100	; 0x64
 8005326:	fb01 f303 	mul.w	r3, r1, r3
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	3332      	adds	r3, #50	; 0x32
 8005330:	4a08      	ldr	r2, [pc, #32]	; (8005354 <UART_SetConfig+0x4e4>)
 8005332:	fba2 2303 	umull	r2, r3, r2, r3
 8005336:	095b      	lsrs	r3, r3, #5
 8005338:	f003 020f 	and.w	r2, r3, #15
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4422      	add	r2, r4
 8005344:	609a      	str	r2, [r3, #8]
}
 8005346:	bf00      	nop
 8005348:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800534c:	46bd      	mov	sp, r7
 800534e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005352:	bf00      	nop
 8005354:	51eb851f 	.word	0x51eb851f

08005358 <__errno>:
 8005358:	4b01      	ldr	r3, [pc, #4]	; (8005360 <__errno+0x8>)
 800535a:	6818      	ldr	r0, [r3, #0]
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	20000010 	.word	0x20000010

08005364 <__libc_init_array>:
 8005364:	b570      	push	{r4, r5, r6, lr}
 8005366:	4d0d      	ldr	r5, [pc, #52]	; (800539c <__libc_init_array+0x38>)
 8005368:	4c0d      	ldr	r4, [pc, #52]	; (80053a0 <__libc_init_array+0x3c>)
 800536a:	1b64      	subs	r4, r4, r5
 800536c:	10a4      	asrs	r4, r4, #2
 800536e:	2600      	movs	r6, #0
 8005370:	42a6      	cmp	r6, r4
 8005372:	d109      	bne.n	8005388 <__libc_init_array+0x24>
 8005374:	4d0b      	ldr	r5, [pc, #44]	; (80053a4 <__libc_init_array+0x40>)
 8005376:	4c0c      	ldr	r4, [pc, #48]	; (80053a8 <__libc_init_array+0x44>)
 8005378:	f000 fc8e 	bl	8005c98 <_init>
 800537c:	1b64      	subs	r4, r4, r5
 800537e:	10a4      	asrs	r4, r4, #2
 8005380:	2600      	movs	r6, #0
 8005382:	42a6      	cmp	r6, r4
 8005384:	d105      	bne.n	8005392 <__libc_init_array+0x2e>
 8005386:	bd70      	pop	{r4, r5, r6, pc}
 8005388:	f855 3b04 	ldr.w	r3, [r5], #4
 800538c:	4798      	blx	r3
 800538e:	3601      	adds	r6, #1
 8005390:	e7ee      	b.n	8005370 <__libc_init_array+0xc>
 8005392:	f855 3b04 	ldr.w	r3, [r5], #4
 8005396:	4798      	blx	r3
 8005398:	3601      	adds	r6, #1
 800539a:	e7f2      	b.n	8005382 <__libc_init_array+0x1e>
 800539c:	08005d5c 	.word	0x08005d5c
 80053a0:	08005d5c 	.word	0x08005d5c
 80053a4:	08005d5c 	.word	0x08005d5c
 80053a8:	08005d60 	.word	0x08005d60

080053ac <memset>:
 80053ac:	4402      	add	r2, r0
 80053ae:	4603      	mov	r3, r0
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d100      	bne.n	80053b6 <memset+0xa>
 80053b4:	4770      	bx	lr
 80053b6:	f803 1b01 	strb.w	r1, [r3], #1
 80053ba:	e7f9      	b.n	80053b0 <memset+0x4>

080053bc <siprintf>:
 80053bc:	b40e      	push	{r1, r2, r3}
 80053be:	b500      	push	{lr}
 80053c0:	b09c      	sub	sp, #112	; 0x70
 80053c2:	ab1d      	add	r3, sp, #116	; 0x74
 80053c4:	9002      	str	r0, [sp, #8]
 80053c6:	9006      	str	r0, [sp, #24]
 80053c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053cc:	4809      	ldr	r0, [pc, #36]	; (80053f4 <siprintf+0x38>)
 80053ce:	9107      	str	r1, [sp, #28]
 80053d0:	9104      	str	r1, [sp, #16]
 80053d2:	4909      	ldr	r1, [pc, #36]	; (80053f8 <siprintf+0x3c>)
 80053d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80053d8:	9105      	str	r1, [sp, #20]
 80053da:	6800      	ldr	r0, [r0, #0]
 80053dc:	9301      	str	r3, [sp, #4]
 80053de:	a902      	add	r1, sp, #8
 80053e0:	f000 f868 	bl	80054b4 <_svfiprintf_r>
 80053e4:	9b02      	ldr	r3, [sp, #8]
 80053e6:	2200      	movs	r2, #0
 80053e8:	701a      	strb	r2, [r3, #0]
 80053ea:	b01c      	add	sp, #112	; 0x70
 80053ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80053f0:	b003      	add	sp, #12
 80053f2:	4770      	bx	lr
 80053f4:	20000010 	.word	0x20000010
 80053f8:	ffff0208 	.word	0xffff0208

080053fc <__ssputs_r>:
 80053fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005400:	688e      	ldr	r6, [r1, #8]
 8005402:	429e      	cmp	r6, r3
 8005404:	4682      	mov	sl, r0
 8005406:	460c      	mov	r4, r1
 8005408:	4690      	mov	r8, r2
 800540a:	461f      	mov	r7, r3
 800540c:	d838      	bhi.n	8005480 <__ssputs_r+0x84>
 800540e:	898a      	ldrh	r2, [r1, #12]
 8005410:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005414:	d032      	beq.n	800547c <__ssputs_r+0x80>
 8005416:	6825      	ldr	r5, [r4, #0]
 8005418:	6909      	ldr	r1, [r1, #16]
 800541a:	eba5 0901 	sub.w	r9, r5, r1
 800541e:	6965      	ldr	r5, [r4, #20]
 8005420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005424:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005428:	3301      	adds	r3, #1
 800542a:	444b      	add	r3, r9
 800542c:	106d      	asrs	r5, r5, #1
 800542e:	429d      	cmp	r5, r3
 8005430:	bf38      	it	cc
 8005432:	461d      	movcc	r5, r3
 8005434:	0553      	lsls	r3, r2, #21
 8005436:	d531      	bpl.n	800549c <__ssputs_r+0xa0>
 8005438:	4629      	mov	r1, r5
 800543a:	f000 fb63 	bl	8005b04 <_malloc_r>
 800543e:	4606      	mov	r6, r0
 8005440:	b950      	cbnz	r0, 8005458 <__ssputs_r+0x5c>
 8005442:	230c      	movs	r3, #12
 8005444:	f8ca 3000 	str.w	r3, [sl]
 8005448:	89a3      	ldrh	r3, [r4, #12]
 800544a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800544e:	81a3      	strh	r3, [r4, #12]
 8005450:	f04f 30ff 	mov.w	r0, #4294967295
 8005454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005458:	6921      	ldr	r1, [r4, #16]
 800545a:	464a      	mov	r2, r9
 800545c:	f000 fabe 	bl	80059dc <memcpy>
 8005460:	89a3      	ldrh	r3, [r4, #12]
 8005462:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546a:	81a3      	strh	r3, [r4, #12]
 800546c:	6126      	str	r6, [r4, #16]
 800546e:	6165      	str	r5, [r4, #20]
 8005470:	444e      	add	r6, r9
 8005472:	eba5 0509 	sub.w	r5, r5, r9
 8005476:	6026      	str	r6, [r4, #0]
 8005478:	60a5      	str	r5, [r4, #8]
 800547a:	463e      	mov	r6, r7
 800547c:	42be      	cmp	r6, r7
 800547e:	d900      	bls.n	8005482 <__ssputs_r+0x86>
 8005480:	463e      	mov	r6, r7
 8005482:	6820      	ldr	r0, [r4, #0]
 8005484:	4632      	mov	r2, r6
 8005486:	4641      	mov	r1, r8
 8005488:	f000 fab6 	bl	80059f8 <memmove>
 800548c:	68a3      	ldr	r3, [r4, #8]
 800548e:	1b9b      	subs	r3, r3, r6
 8005490:	60a3      	str	r3, [r4, #8]
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	4433      	add	r3, r6
 8005496:	6023      	str	r3, [r4, #0]
 8005498:	2000      	movs	r0, #0
 800549a:	e7db      	b.n	8005454 <__ssputs_r+0x58>
 800549c:	462a      	mov	r2, r5
 800549e:	f000 fba5 	bl	8005bec <_realloc_r>
 80054a2:	4606      	mov	r6, r0
 80054a4:	2800      	cmp	r0, #0
 80054a6:	d1e1      	bne.n	800546c <__ssputs_r+0x70>
 80054a8:	6921      	ldr	r1, [r4, #16]
 80054aa:	4650      	mov	r0, sl
 80054ac:	f000 fabe 	bl	8005a2c <_free_r>
 80054b0:	e7c7      	b.n	8005442 <__ssputs_r+0x46>
	...

080054b4 <_svfiprintf_r>:
 80054b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b8:	4698      	mov	r8, r3
 80054ba:	898b      	ldrh	r3, [r1, #12]
 80054bc:	061b      	lsls	r3, r3, #24
 80054be:	b09d      	sub	sp, #116	; 0x74
 80054c0:	4607      	mov	r7, r0
 80054c2:	460d      	mov	r5, r1
 80054c4:	4614      	mov	r4, r2
 80054c6:	d50e      	bpl.n	80054e6 <_svfiprintf_r+0x32>
 80054c8:	690b      	ldr	r3, [r1, #16]
 80054ca:	b963      	cbnz	r3, 80054e6 <_svfiprintf_r+0x32>
 80054cc:	2140      	movs	r1, #64	; 0x40
 80054ce:	f000 fb19 	bl	8005b04 <_malloc_r>
 80054d2:	6028      	str	r0, [r5, #0]
 80054d4:	6128      	str	r0, [r5, #16]
 80054d6:	b920      	cbnz	r0, 80054e2 <_svfiprintf_r+0x2e>
 80054d8:	230c      	movs	r3, #12
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	f04f 30ff 	mov.w	r0, #4294967295
 80054e0:	e0d1      	b.n	8005686 <_svfiprintf_r+0x1d2>
 80054e2:	2340      	movs	r3, #64	; 0x40
 80054e4:	616b      	str	r3, [r5, #20]
 80054e6:	2300      	movs	r3, #0
 80054e8:	9309      	str	r3, [sp, #36]	; 0x24
 80054ea:	2320      	movs	r3, #32
 80054ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80054f4:	2330      	movs	r3, #48	; 0x30
 80054f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80056a0 <_svfiprintf_r+0x1ec>
 80054fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054fe:	f04f 0901 	mov.w	r9, #1
 8005502:	4623      	mov	r3, r4
 8005504:	469a      	mov	sl, r3
 8005506:	f813 2b01 	ldrb.w	r2, [r3], #1
 800550a:	b10a      	cbz	r2, 8005510 <_svfiprintf_r+0x5c>
 800550c:	2a25      	cmp	r2, #37	; 0x25
 800550e:	d1f9      	bne.n	8005504 <_svfiprintf_r+0x50>
 8005510:	ebba 0b04 	subs.w	fp, sl, r4
 8005514:	d00b      	beq.n	800552e <_svfiprintf_r+0x7a>
 8005516:	465b      	mov	r3, fp
 8005518:	4622      	mov	r2, r4
 800551a:	4629      	mov	r1, r5
 800551c:	4638      	mov	r0, r7
 800551e:	f7ff ff6d 	bl	80053fc <__ssputs_r>
 8005522:	3001      	adds	r0, #1
 8005524:	f000 80aa 	beq.w	800567c <_svfiprintf_r+0x1c8>
 8005528:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800552a:	445a      	add	r2, fp
 800552c:	9209      	str	r2, [sp, #36]	; 0x24
 800552e:	f89a 3000 	ldrb.w	r3, [sl]
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 80a2 	beq.w	800567c <_svfiprintf_r+0x1c8>
 8005538:	2300      	movs	r3, #0
 800553a:	f04f 32ff 	mov.w	r2, #4294967295
 800553e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005542:	f10a 0a01 	add.w	sl, sl, #1
 8005546:	9304      	str	r3, [sp, #16]
 8005548:	9307      	str	r3, [sp, #28]
 800554a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800554e:	931a      	str	r3, [sp, #104]	; 0x68
 8005550:	4654      	mov	r4, sl
 8005552:	2205      	movs	r2, #5
 8005554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005558:	4851      	ldr	r0, [pc, #324]	; (80056a0 <_svfiprintf_r+0x1ec>)
 800555a:	f7fa fe49 	bl	80001f0 <memchr>
 800555e:	9a04      	ldr	r2, [sp, #16]
 8005560:	b9d8      	cbnz	r0, 800559a <_svfiprintf_r+0xe6>
 8005562:	06d0      	lsls	r0, r2, #27
 8005564:	bf44      	itt	mi
 8005566:	2320      	movmi	r3, #32
 8005568:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800556c:	0711      	lsls	r1, r2, #28
 800556e:	bf44      	itt	mi
 8005570:	232b      	movmi	r3, #43	; 0x2b
 8005572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005576:	f89a 3000 	ldrb.w	r3, [sl]
 800557a:	2b2a      	cmp	r3, #42	; 0x2a
 800557c:	d015      	beq.n	80055aa <_svfiprintf_r+0xf6>
 800557e:	9a07      	ldr	r2, [sp, #28]
 8005580:	4654      	mov	r4, sl
 8005582:	2000      	movs	r0, #0
 8005584:	f04f 0c0a 	mov.w	ip, #10
 8005588:	4621      	mov	r1, r4
 800558a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800558e:	3b30      	subs	r3, #48	; 0x30
 8005590:	2b09      	cmp	r3, #9
 8005592:	d94e      	bls.n	8005632 <_svfiprintf_r+0x17e>
 8005594:	b1b0      	cbz	r0, 80055c4 <_svfiprintf_r+0x110>
 8005596:	9207      	str	r2, [sp, #28]
 8005598:	e014      	b.n	80055c4 <_svfiprintf_r+0x110>
 800559a:	eba0 0308 	sub.w	r3, r0, r8
 800559e:	fa09 f303 	lsl.w	r3, r9, r3
 80055a2:	4313      	orrs	r3, r2
 80055a4:	9304      	str	r3, [sp, #16]
 80055a6:	46a2      	mov	sl, r4
 80055a8:	e7d2      	b.n	8005550 <_svfiprintf_r+0x9c>
 80055aa:	9b03      	ldr	r3, [sp, #12]
 80055ac:	1d19      	adds	r1, r3, #4
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	9103      	str	r1, [sp, #12]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	bfbb      	ittet	lt
 80055b6:	425b      	neglt	r3, r3
 80055b8:	f042 0202 	orrlt.w	r2, r2, #2
 80055bc:	9307      	strge	r3, [sp, #28]
 80055be:	9307      	strlt	r3, [sp, #28]
 80055c0:	bfb8      	it	lt
 80055c2:	9204      	strlt	r2, [sp, #16]
 80055c4:	7823      	ldrb	r3, [r4, #0]
 80055c6:	2b2e      	cmp	r3, #46	; 0x2e
 80055c8:	d10c      	bne.n	80055e4 <_svfiprintf_r+0x130>
 80055ca:	7863      	ldrb	r3, [r4, #1]
 80055cc:	2b2a      	cmp	r3, #42	; 0x2a
 80055ce:	d135      	bne.n	800563c <_svfiprintf_r+0x188>
 80055d0:	9b03      	ldr	r3, [sp, #12]
 80055d2:	1d1a      	adds	r2, r3, #4
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	9203      	str	r2, [sp, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bfb8      	it	lt
 80055dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80055e0:	3402      	adds	r4, #2
 80055e2:	9305      	str	r3, [sp, #20]
 80055e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80056b0 <_svfiprintf_r+0x1fc>
 80055e8:	7821      	ldrb	r1, [r4, #0]
 80055ea:	2203      	movs	r2, #3
 80055ec:	4650      	mov	r0, sl
 80055ee:	f7fa fdff 	bl	80001f0 <memchr>
 80055f2:	b140      	cbz	r0, 8005606 <_svfiprintf_r+0x152>
 80055f4:	2340      	movs	r3, #64	; 0x40
 80055f6:	eba0 000a 	sub.w	r0, r0, sl
 80055fa:	fa03 f000 	lsl.w	r0, r3, r0
 80055fe:	9b04      	ldr	r3, [sp, #16]
 8005600:	4303      	orrs	r3, r0
 8005602:	3401      	adds	r4, #1
 8005604:	9304      	str	r3, [sp, #16]
 8005606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800560a:	4826      	ldr	r0, [pc, #152]	; (80056a4 <_svfiprintf_r+0x1f0>)
 800560c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005610:	2206      	movs	r2, #6
 8005612:	f7fa fded 	bl	80001f0 <memchr>
 8005616:	2800      	cmp	r0, #0
 8005618:	d038      	beq.n	800568c <_svfiprintf_r+0x1d8>
 800561a:	4b23      	ldr	r3, [pc, #140]	; (80056a8 <_svfiprintf_r+0x1f4>)
 800561c:	bb1b      	cbnz	r3, 8005666 <_svfiprintf_r+0x1b2>
 800561e:	9b03      	ldr	r3, [sp, #12]
 8005620:	3307      	adds	r3, #7
 8005622:	f023 0307 	bic.w	r3, r3, #7
 8005626:	3308      	adds	r3, #8
 8005628:	9303      	str	r3, [sp, #12]
 800562a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800562c:	4433      	add	r3, r6
 800562e:	9309      	str	r3, [sp, #36]	; 0x24
 8005630:	e767      	b.n	8005502 <_svfiprintf_r+0x4e>
 8005632:	fb0c 3202 	mla	r2, ip, r2, r3
 8005636:	460c      	mov	r4, r1
 8005638:	2001      	movs	r0, #1
 800563a:	e7a5      	b.n	8005588 <_svfiprintf_r+0xd4>
 800563c:	2300      	movs	r3, #0
 800563e:	3401      	adds	r4, #1
 8005640:	9305      	str	r3, [sp, #20]
 8005642:	4619      	mov	r1, r3
 8005644:	f04f 0c0a 	mov.w	ip, #10
 8005648:	4620      	mov	r0, r4
 800564a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800564e:	3a30      	subs	r2, #48	; 0x30
 8005650:	2a09      	cmp	r2, #9
 8005652:	d903      	bls.n	800565c <_svfiprintf_r+0x1a8>
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0c5      	beq.n	80055e4 <_svfiprintf_r+0x130>
 8005658:	9105      	str	r1, [sp, #20]
 800565a:	e7c3      	b.n	80055e4 <_svfiprintf_r+0x130>
 800565c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005660:	4604      	mov	r4, r0
 8005662:	2301      	movs	r3, #1
 8005664:	e7f0      	b.n	8005648 <_svfiprintf_r+0x194>
 8005666:	ab03      	add	r3, sp, #12
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	462a      	mov	r2, r5
 800566c:	4b0f      	ldr	r3, [pc, #60]	; (80056ac <_svfiprintf_r+0x1f8>)
 800566e:	a904      	add	r1, sp, #16
 8005670:	4638      	mov	r0, r7
 8005672:	f3af 8000 	nop.w
 8005676:	1c42      	adds	r2, r0, #1
 8005678:	4606      	mov	r6, r0
 800567a:	d1d6      	bne.n	800562a <_svfiprintf_r+0x176>
 800567c:	89ab      	ldrh	r3, [r5, #12]
 800567e:	065b      	lsls	r3, r3, #25
 8005680:	f53f af2c 	bmi.w	80054dc <_svfiprintf_r+0x28>
 8005684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005686:	b01d      	add	sp, #116	; 0x74
 8005688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800568c:	ab03      	add	r3, sp, #12
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	462a      	mov	r2, r5
 8005692:	4b06      	ldr	r3, [pc, #24]	; (80056ac <_svfiprintf_r+0x1f8>)
 8005694:	a904      	add	r1, sp, #16
 8005696:	4638      	mov	r0, r7
 8005698:	f000 f87a 	bl	8005790 <_printf_i>
 800569c:	e7eb      	b.n	8005676 <_svfiprintf_r+0x1c2>
 800569e:	bf00      	nop
 80056a0:	08005d20 	.word	0x08005d20
 80056a4:	08005d2a 	.word	0x08005d2a
 80056a8:	00000000 	.word	0x00000000
 80056ac:	080053fd 	.word	0x080053fd
 80056b0:	08005d26 	.word	0x08005d26

080056b4 <_printf_common>:
 80056b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056b8:	4616      	mov	r6, r2
 80056ba:	4699      	mov	r9, r3
 80056bc:	688a      	ldr	r2, [r1, #8]
 80056be:	690b      	ldr	r3, [r1, #16]
 80056c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056c4:	4293      	cmp	r3, r2
 80056c6:	bfb8      	it	lt
 80056c8:	4613      	movlt	r3, r2
 80056ca:	6033      	str	r3, [r6, #0]
 80056cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056d0:	4607      	mov	r7, r0
 80056d2:	460c      	mov	r4, r1
 80056d4:	b10a      	cbz	r2, 80056da <_printf_common+0x26>
 80056d6:	3301      	adds	r3, #1
 80056d8:	6033      	str	r3, [r6, #0]
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	0699      	lsls	r1, r3, #26
 80056de:	bf42      	ittt	mi
 80056e0:	6833      	ldrmi	r3, [r6, #0]
 80056e2:	3302      	addmi	r3, #2
 80056e4:	6033      	strmi	r3, [r6, #0]
 80056e6:	6825      	ldr	r5, [r4, #0]
 80056e8:	f015 0506 	ands.w	r5, r5, #6
 80056ec:	d106      	bne.n	80056fc <_printf_common+0x48>
 80056ee:	f104 0a19 	add.w	sl, r4, #25
 80056f2:	68e3      	ldr	r3, [r4, #12]
 80056f4:	6832      	ldr	r2, [r6, #0]
 80056f6:	1a9b      	subs	r3, r3, r2
 80056f8:	42ab      	cmp	r3, r5
 80056fa:	dc26      	bgt.n	800574a <_printf_common+0x96>
 80056fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005700:	1e13      	subs	r3, r2, #0
 8005702:	6822      	ldr	r2, [r4, #0]
 8005704:	bf18      	it	ne
 8005706:	2301      	movne	r3, #1
 8005708:	0692      	lsls	r2, r2, #26
 800570a:	d42b      	bmi.n	8005764 <_printf_common+0xb0>
 800570c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005710:	4649      	mov	r1, r9
 8005712:	4638      	mov	r0, r7
 8005714:	47c0      	blx	r8
 8005716:	3001      	adds	r0, #1
 8005718:	d01e      	beq.n	8005758 <_printf_common+0xa4>
 800571a:	6823      	ldr	r3, [r4, #0]
 800571c:	68e5      	ldr	r5, [r4, #12]
 800571e:	6832      	ldr	r2, [r6, #0]
 8005720:	f003 0306 	and.w	r3, r3, #6
 8005724:	2b04      	cmp	r3, #4
 8005726:	bf08      	it	eq
 8005728:	1aad      	subeq	r5, r5, r2
 800572a:	68a3      	ldr	r3, [r4, #8]
 800572c:	6922      	ldr	r2, [r4, #16]
 800572e:	bf0c      	ite	eq
 8005730:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005734:	2500      	movne	r5, #0
 8005736:	4293      	cmp	r3, r2
 8005738:	bfc4      	itt	gt
 800573a:	1a9b      	subgt	r3, r3, r2
 800573c:	18ed      	addgt	r5, r5, r3
 800573e:	2600      	movs	r6, #0
 8005740:	341a      	adds	r4, #26
 8005742:	42b5      	cmp	r5, r6
 8005744:	d11a      	bne.n	800577c <_printf_common+0xc8>
 8005746:	2000      	movs	r0, #0
 8005748:	e008      	b.n	800575c <_printf_common+0xa8>
 800574a:	2301      	movs	r3, #1
 800574c:	4652      	mov	r2, sl
 800574e:	4649      	mov	r1, r9
 8005750:	4638      	mov	r0, r7
 8005752:	47c0      	blx	r8
 8005754:	3001      	adds	r0, #1
 8005756:	d103      	bne.n	8005760 <_printf_common+0xac>
 8005758:	f04f 30ff 	mov.w	r0, #4294967295
 800575c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005760:	3501      	adds	r5, #1
 8005762:	e7c6      	b.n	80056f2 <_printf_common+0x3e>
 8005764:	18e1      	adds	r1, r4, r3
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	2030      	movs	r0, #48	; 0x30
 800576a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800576e:	4422      	add	r2, r4
 8005770:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005774:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005778:	3302      	adds	r3, #2
 800577a:	e7c7      	b.n	800570c <_printf_common+0x58>
 800577c:	2301      	movs	r3, #1
 800577e:	4622      	mov	r2, r4
 8005780:	4649      	mov	r1, r9
 8005782:	4638      	mov	r0, r7
 8005784:	47c0      	blx	r8
 8005786:	3001      	adds	r0, #1
 8005788:	d0e6      	beq.n	8005758 <_printf_common+0xa4>
 800578a:	3601      	adds	r6, #1
 800578c:	e7d9      	b.n	8005742 <_printf_common+0x8e>
	...

08005790 <_printf_i>:
 8005790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005794:	7e0f      	ldrb	r7, [r1, #24]
 8005796:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005798:	2f78      	cmp	r7, #120	; 0x78
 800579a:	4691      	mov	r9, r2
 800579c:	4680      	mov	r8, r0
 800579e:	460c      	mov	r4, r1
 80057a0:	469a      	mov	sl, r3
 80057a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057a6:	d807      	bhi.n	80057b8 <_printf_i+0x28>
 80057a8:	2f62      	cmp	r7, #98	; 0x62
 80057aa:	d80a      	bhi.n	80057c2 <_printf_i+0x32>
 80057ac:	2f00      	cmp	r7, #0
 80057ae:	f000 80d8 	beq.w	8005962 <_printf_i+0x1d2>
 80057b2:	2f58      	cmp	r7, #88	; 0x58
 80057b4:	f000 80a3 	beq.w	80058fe <_printf_i+0x16e>
 80057b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057c0:	e03a      	b.n	8005838 <_printf_i+0xa8>
 80057c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057c6:	2b15      	cmp	r3, #21
 80057c8:	d8f6      	bhi.n	80057b8 <_printf_i+0x28>
 80057ca:	a101      	add	r1, pc, #4	; (adr r1, 80057d0 <_printf_i+0x40>)
 80057cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057d0:	08005829 	.word	0x08005829
 80057d4:	0800583d 	.word	0x0800583d
 80057d8:	080057b9 	.word	0x080057b9
 80057dc:	080057b9 	.word	0x080057b9
 80057e0:	080057b9 	.word	0x080057b9
 80057e4:	080057b9 	.word	0x080057b9
 80057e8:	0800583d 	.word	0x0800583d
 80057ec:	080057b9 	.word	0x080057b9
 80057f0:	080057b9 	.word	0x080057b9
 80057f4:	080057b9 	.word	0x080057b9
 80057f8:	080057b9 	.word	0x080057b9
 80057fc:	08005949 	.word	0x08005949
 8005800:	0800586d 	.word	0x0800586d
 8005804:	0800592b 	.word	0x0800592b
 8005808:	080057b9 	.word	0x080057b9
 800580c:	080057b9 	.word	0x080057b9
 8005810:	0800596b 	.word	0x0800596b
 8005814:	080057b9 	.word	0x080057b9
 8005818:	0800586d 	.word	0x0800586d
 800581c:	080057b9 	.word	0x080057b9
 8005820:	080057b9 	.word	0x080057b9
 8005824:	08005933 	.word	0x08005933
 8005828:	682b      	ldr	r3, [r5, #0]
 800582a:	1d1a      	adds	r2, r3, #4
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	602a      	str	r2, [r5, #0]
 8005830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005834:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005838:	2301      	movs	r3, #1
 800583a:	e0a3      	b.n	8005984 <_printf_i+0x1f4>
 800583c:	6820      	ldr	r0, [r4, #0]
 800583e:	6829      	ldr	r1, [r5, #0]
 8005840:	0606      	lsls	r6, r0, #24
 8005842:	f101 0304 	add.w	r3, r1, #4
 8005846:	d50a      	bpl.n	800585e <_printf_i+0xce>
 8005848:	680e      	ldr	r6, [r1, #0]
 800584a:	602b      	str	r3, [r5, #0]
 800584c:	2e00      	cmp	r6, #0
 800584e:	da03      	bge.n	8005858 <_printf_i+0xc8>
 8005850:	232d      	movs	r3, #45	; 0x2d
 8005852:	4276      	negs	r6, r6
 8005854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005858:	485e      	ldr	r0, [pc, #376]	; (80059d4 <_printf_i+0x244>)
 800585a:	230a      	movs	r3, #10
 800585c:	e019      	b.n	8005892 <_printf_i+0x102>
 800585e:	680e      	ldr	r6, [r1, #0]
 8005860:	602b      	str	r3, [r5, #0]
 8005862:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005866:	bf18      	it	ne
 8005868:	b236      	sxthne	r6, r6
 800586a:	e7ef      	b.n	800584c <_printf_i+0xbc>
 800586c:	682b      	ldr	r3, [r5, #0]
 800586e:	6820      	ldr	r0, [r4, #0]
 8005870:	1d19      	adds	r1, r3, #4
 8005872:	6029      	str	r1, [r5, #0]
 8005874:	0601      	lsls	r1, r0, #24
 8005876:	d501      	bpl.n	800587c <_printf_i+0xec>
 8005878:	681e      	ldr	r6, [r3, #0]
 800587a:	e002      	b.n	8005882 <_printf_i+0xf2>
 800587c:	0646      	lsls	r6, r0, #25
 800587e:	d5fb      	bpl.n	8005878 <_printf_i+0xe8>
 8005880:	881e      	ldrh	r6, [r3, #0]
 8005882:	4854      	ldr	r0, [pc, #336]	; (80059d4 <_printf_i+0x244>)
 8005884:	2f6f      	cmp	r7, #111	; 0x6f
 8005886:	bf0c      	ite	eq
 8005888:	2308      	moveq	r3, #8
 800588a:	230a      	movne	r3, #10
 800588c:	2100      	movs	r1, #0
 800588e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005892:	6865      	ldr	r5, [r4, #4]
 8005894:	60a5      	str	r5, [r4, #8]
 8005896:	2d00      	cmp	r5, #0
 8005898:	bfa2      	ittt	ge
 800589a:	6821      	ldrge	r1, [r4, #0]
 800589c:	f021 0104 	bicge.w	r1, r1, #4
 80058a0:	6021      	strge	r1, [r4, #0]
 80058a2:	b90e      	cbnz	r6, 80058a8 <_printf_i+0x118>
 80058a4:	2d00      	cmp	r5, #0
 80058a6:	d04d      	beq.n	8005944 <_printf_i+0x1b4>
 80058a8:	4615      	mov	r5, r2
 80058aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80058ae:	fb03 6711 	mls	r7, r3, r1, r6
 80058b2:	5dc7      	ldrb	r7, [r0, r7]
 80058b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058b8:	4637      	mov	r7, r6
 80058ba:	42bb      	cmp	r3, r7
 80058bc:	460e      	mov	r6, r1
 80058be:	d9f4      	bls.n	80058aa <_printf_i+0x11a>
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d10b      	bne.n	80058dc <_printf_i+0x14c>
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	07de      	lsls	r6, r3, #31
 80058c8:	d508      	bpl.n	80058dc <_printf_i+0x14c>
 80058ca:	6923      	ldr	r3, [r4, #16]
 80058cc:	6861      	ldr	r1, [r4, #4]
 80058ce:	4299      	cmp	r1, r3
 80058d0:	bfde      	ittt	le
 80058d2:	2330      	movle	r3, #48	; 0x30
 80058d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058dc:	1b52      	subs	r2, r2, r5
 80058de:	6122      	str	r2, [r4, #16]
 80058e0:	f8cd a000 	str.w	sl, [sp]
 80058e4:	464b      	mov	r3, r9
 80058e6:	aa03      	add	r2, sp, #12
 80058e8:	4621      	mov	r1, r4
 80058ea:	4640      	mov	r0, r8
 80058ec:	f7ff fee2 	bl	80056b4 <_printf_common>
 80058f0:	3001      	adds	r0, #1
 80058f2:	d14c      	bne.n	800598e <_printf_i+0x1fe>
 80058f4:	f04f 30ff 	mov.w	r0, #4294967295
 80058f8:	b004      	add	sp, #16
 80058fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058fe:	4835      	ldr	r0, [pc, #212]	; (80059d4 <_printf_i+0x244>)
 8005900:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005904:	6829      	ldr	r1, [r5, #0]
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	f851 6b04 	ldr.w	r6, [r1], #4
 800590c:	6029      	str	r1, [r5, #0]
 800590e:	061d      	lsls	r5, r3, #24
 8005910:	d514      	bpl.n	800593c <_printf_i+0x1ac>
 8005912:	07df      	lsls	r7, r3, #31
 8005914:	bf44      	itt	mi
 8005916:	f043 0320 	orrmi.w	r3, r3, #32
 800591a:	6023      	strmi	r3, [r4, #0]
 800591c:	b91e      	cbnz	r6, 8005926 <_printf_i+0x196>
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	f023 0320 	bic.w	r3, r3, #32
 8005924:	6023      	str	r3, [r4, #0]
 8005926:	2310      	movs	r3, #16
 8005928:	e7b0      	b.n	800588c <_printf_i+0xfc>
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	f043 0320 	orr.w	r3, r3, #32
 8005930:	6023      	str	r3, [r4, #0]
 8005932:	2378      	movs	r3, #120	; 0x78
 8005934:	4828      	ldr	r0, [pc, #160]	; (80059d8 <_printf_i+0x248>)
 8005936:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800593a:	e7e3      	b.n	8005904 <_printf_i+0x174>
 800593c:	0659      	lsls	r1, r3, #25
 800593e:	bf48      	it	mi
 8005940:	b2b6      	uxthmi	r6, r6
 8005942:	e7e6      	b.n	8005912 <_printf_i+0x182>
 8005944:	4615      	mov	r5, r2
 8005946:	e7bb      	b.n	80058c0 <_printf_i+0x130>
 8005948:	682b      	ldr	r3, [r5, #0]
 800594a:	6826      	ldr	r6, [r4, #0]
 800594c:	6961      	ldr	r1, [r4, #20]
 800594e:	1d18      	adds	r0, r3, #4
 8005950:	6028      	str	r0, [r5, #0]
 8005952:	0635      	lsls	r5, r6, #24
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	d501      	bpl.n	800595c <_printf_i+0x1cc>
 8005958:	6019      	str	r1, [r3, #0]
 800595a:	e002      	b.n	8005962 <_printf_i+0x1d2>
 800595c:	0670      	lsls	r0, r6, #25
 800595e:	d5fb      	bpl.n	8005958 <_printf_i+0x1c8>
 8005960:	8019      	strh	r1, [r3, #0]
 8005962:	2300      	movs	r3, #0
 8005964:	6123      	str	r3, [r4, #16]
 8005966:	4615      	mov	r5, r2
 8005968:	e7ba      	b.n	80058e0 <_printf_i+0x150>
 800596a:	682b      	ldr	r3, [r5, #0]
 800596c:	1d1a      	adds	r2, r3, #4
 800596e:	602a      	str	r2, [r5, #0]
 8005970:	681d      	ldr	r5, [r3, #0]
 8005972:	6862      	ldr	r2, [r4, #4]
 8005974:	2100      	movs	r1, #0
 8005976:	4628      	mov	r0, r5
 8005978:	f7fa fc3a 	bl	80001f0 <memchr>
 800597c:	b108      	cbz	r0, 8005982 <_printf_i+0x1f2>
 800597e:	1b40      	subs	r0, r0, r5
 8005980:	6060      	str	r0, [r4, #4]
 8005982:	6863      	ldr	r3, [r4, #4]
 8005984:	6123      	str	r3, [r4, #16]
 8005986:	2300      	movs	r3, #0
 8005988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800598c:	e7a8      	b.n	80058e0 <_printf_i+0x150>
 800598e:	6923      	ldr	r3, [r4, #16]
 8005990:	462a      	mov	r2, r5
 8005992:	4649      	mov	r1, r9
 8005994:	4640      	mov	r0, r8
 8005996:	47d0      	blx	sl
 8005998:	3001      	adds	r0, #1
 800599a:	d0ab      	beq.n	80058f4 <_printf_i+0x164>
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	079b      	lsls	r3, r3, #30
 80059a0:	d413      	bmi.n	80059ca <_printf_i+0x23a>
 80059a2:	68e0      	ldr	r0, [r4, #12]
 80059a4:	9b03      	ldr	r3, [sp, #12]
 80059a6:	4298      	cmp	r0, r3
 80059a8:	bfb8      	it	lt
 80059aa:	4618      	movlt	r0, r3
 80059ac:	e7a4      	b.n	80058f8 <_printf_i+0x168>
 80059ae:	2301      	movs	r3, #1
 80059b0:	4632      	mov	r2, r6
 80059b2:	4649      	mov	r1, r9
 80059b4:	4640      	mov	r0, r8
 80059b6:	47d0      	blx	sl
 80059b8:	3001      	adds	r0, #1
 80059ba:	d09b      	beq.n	80058f4 <_printf_i+0x164>
 80059bc:	3501      	adds	r5, #1
 80059be:	68e3      	ldr	r3, [r4, #12]
 80059c0:	9903      	ldr	r1, [sp, #12]
 80059c2:	1a5b      	subs	r3, r3, r1
 80059c4:	42ab      	cmp	r3, r5
 80059c6:	dcf2      	bgt.n	80059ae <_printf_i+0x21e>
 80059c8:	e7eb      	b.n	80059a2 <_printf_i+0x212>
 80059ca:	2500      	movs	r5, #0
 80059cc:	f104 0619 	add.w	r6, r4, #25
 80059d0:	e7f5      	b.n	80059be <_printf_i+0x22e>
 80059d2:	bf00      	nop
 80059d4:	08005d31 	.word	0x08005d31
 80059d8:	08005d42 	.word	0x08005d42

080059dc <memcpy>:
 80059dc:	440a      	add	r2, r1
 80059de:	4291      	cmp	r1, r2
 80059e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80059e4:	d100      	bne.n	80059e8 <memcpy+0xc>
 80059e6:	4770      	bx	lr
 80059e8:	b510      	push	{r4, lr}
 80059ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059f2:	4291      	cmp	r1, r2
 80059f4:	d1f9      	bne.n	80059ea <memcpy+0xe>
 80059f6:	bd10      	pop	{r4, pc}

080059f8 <memmove>:
 80059f8:	4288      	cmp	r0, r1
 80059fa:	b510      	push	{r4, lr}
 80059fc:	eb01 0402 	add.w	r4, r1, r2
 8005a00:	d902      	bls.n	8005a08 <memmove+0x10>
 8005a02:	4284      	cmp	r4, r0
 8005a04:	4623      	mov	r3, r4
 8005a06:	d807      	bhi.n	8005a18 <memmove+0x20>
 8005a08:	1e43      	subs	r3, r0, #1
 8005a0a:	42a1      	cmp	r1, r4
 8005a0c:	d008      	beq.n	8005a20 <memmove+0x28>
 8005a0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a16:	e7f8      	b.n	8005a0a <memmove+0x12>
 8005a18:	4402      	add	r2, r0
 8005a1a:	4601      	mov	r1, r0
 8005a1c:	428a      	cmp	r2, r1
 8005a1e:	d100      	bne.n	8005a22 <memmove+0x2a>
 8005a20:	bd10      	pop	{r4, pc}
 8005a22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a2a:	e7f7      	b.n	8005a1c <memmove+0x24>

08005a2c <_free_r>:
 8005a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a2e:	2900      	cmp	r1, #0
 8005a30:	d044      	beq.n	8005abc <_free_r+0x90>
 8005a32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a36:	9001      	str	r0, [sp, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f1a1 0404 	sub.w	r4, r1, #4
 8005a3e:	bfb8      	it	lt
 8005a40:	18e4      	addlt	r4, r4, r3
 8005a42:	f000 f913 	bl	8005c6c <__malloc_lock>
 8005a46:	4a1e      	ldr	r2, [pc, #120]	; (8005ac0 <_free_r+0x94>)
 8005a48:	9801      	ldr	r0, [sp, #4]
 8005a4a:	6813      	ldr	r3, [r2, #0]
 8005a4c:	b933      	cbnz	r3, 8005a5c <_free_r+0x30>
 8005a4e:	6063      	str	r3, [r4, #4]
 8005a50:	6014      	str	r4, [r2, #0]
 8005a52:	b003      	add	sp, #12
 8005a54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a58:	f000 b90e 	b.w	8005c78 <__malloc_unlock>
 8005a5c:	42a3      	cmp	r3, r4
 8005a5e:	d908      	bls.n	8005a72 <_free_r+0x46>
 8005a60:	6825      	ldr	r5, [r4, #0]
 8005a62:	1961      	adds	r1, r4, r5
 8005a64:	428b      	cmp	r3, r1
 8005a66:	bf01      	itttt	eq
 8005a68:	6819      	ldreq	r1, [r3, #0]
 8005a6a:	685b      	ldreq	r3, [r3, #4]
 8005a6c:	1949      	addeq	r1, r1, r5
 8005a6e:	6021      	streq	r1, [r4, #0]
 8005a70:	e7ed      	b.n	8005a4e <_free_r+0x22>
 8005a72:	461a      	mov	r2, r3
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	b10b      	cbz	r3, 8005a7c <_free_r+0x50>
 8005a78:	42a3      	cmp	r3, r4
 8005a7a:	d9fa      	bls.n	8005a72 <_free_r+0x46>
 8005a7c:	6811      	ldr	r1, [r2, #0]
 8005a7e:	1855      	adds	r5, r2, r1
 8005a80:	42a5      	cmp	r5, r4
 8005a82:	d10b      	bne.n	8005a9c <_free_r+0x70>
 8005a84:	6824      	ldr	r4, [r4, #0]
 8005a86:	4421      	add	r1, r4
 8005a88:	1854      	adds	r4, r2, r1
 8005a8a:	42a3      	cmp	r3, r4
 8005a8c:	6011      	str	r1, [r2, #0]
 8005a8e:	d1e0      	bne.n	8005a52 <_free_r+0x26>
 8005a90:	681c      	ldr	r4, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	6053      	str	r3, [r2, #4]
 8005a96:	4421      	add	r1, r4
 8005a98:	6011      	str	r1, [r2, #0]
 8005a9a:	e7da      	b.n	8005a52 <_free_r+0x26>
 8005a9c:	d902      	bls.n	8005aa4 <_free_r+0x78>
 8005a9e:	230c      	movs	r3, #12
 8005aa0:	6003      	str	r3, [r0, #0]
 8005aa2:	e7d6      	b.n	8005a52 <_free_r+0x26>
 8005aa4:	6825      	ldr	r5, [r4, #0]
 8005aa6:	1961      	adds	r1, r4, r5
 8005aa8:	428b      	cmp	r3, r1
 8005aaa:	bf04      	itt	eq
 8005aac:	6819      	ldreq	r1, [r3, #0]
 8005aae:	685b      	ldreq	r3, [r3, #4]
 8005ab0:	6063      	str	r3, [r4, #4]
 8005ab2:	bf04      	itt	eq
 8005ab4:	1949      	addeq	r1, r1, r5
 8005ab6:	6021      	streq	r1, [r4, #0]
 8005ab8:	6054      	str	r4, [r2, #4]
 8005aba:	e7ca      	b.n	8005a52 <_free_r+0x26>
 8005abc:	b003      	add	sp, #12
 8005abe:	bd30      	pop	{r4, r5, pc}
 8005ac0:	20000248 	.word	0x20000248

08005ac4 <sbrk_aligned>:
 8005ac4:	b570      	push	{r4, r5, r6, lr}
 8005ac6:	4e0e      	ldr	r6, [pc, #56]	; (8005b00 <sbrk_aligned+0x3c>)
 8005ac8:	460c      	mov	r4, r1
 8005aca:	6831      	ldr	r1, [r6, #0]
 8005acc:	4605      	mov	r5, r0
 8005ace:	b911      	cbnz	r1, 8005ad6 <sbrk_aligned+0x12>
 8005ad0:	f000 f8bc 	bl	8005c4c <_sbrk_r>
 8005ad4:	6030      	str	r0, [r6, #0]
 8005ad6:	4621      	mov	r1, r4
 8005ad8:	4628      	mov	r0, r5
 8005ada:	f000 f8b7 	bl	8005c4c <_sbrk_r>
 8005ade:	1c43      	adds	r3, r0, #1
 8005ae0:	d00a      	beq.n	8005af8 <sbrk_aligned+0x34>
 8005ae2:	1cc4      	adds	r4, r0, #3
 8005ae4:	f024 0403 	bic.w	r4, r4, #3
 8005ae8:	42a0      	cmp	r0, r4
 8005aea:	d007      	beq.n	8005afc <sbrk_aligned+0x38>
 8005aec:	1a21      	subs	r1, r4, r0
 8005aee:	4628      	mov	r0, r5
 8005af0:	f000 f8ac 	bl	8005c4c <_sbrk_r>
 8005af4:	3001      	adds	r0, #1
 8005af6:	d101      	bne.n	8005afc <sbrk_aligned+0x38>
 8005af8:	f04f 34ff 	mov.w	r4, #4294967295
 8005afc:	4620      	mov	r0, r4
 8005afe:	bd70      	pop	{r4, r5, r6, pc}
 8005b00:	2000024c 	.word	0x2000024c

08005b04 <_malloc_r>:
 8005b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b08:	1ccd      	adds	r5, r1, #3
 8005b0a:	f025 0503 	bic.w	r5, r5, #3
 8005b0e:	3508      	adds	r5, #8
 8005b10:	2d0c      	cmp	r5, #12
 8005b12:	bf38      	it	cc
 8005b14:	250c      	movcc	r5, #12
 8005b16:	2d00      	cmp	r5, #0
 8005b18:	4607      	mov	r7, r0
 8005b1a:	db01      	blt.n	8005b20 <_malloc_r+0x1c>
 8005b1c:	42a9      	cmp	r1, r5
 8005b1e:	d905      	bls.n	8005b2c <_malloc_r+0x28>
 8005b20:	230c      	movs	r3, #12
 8005b22:	603b      	str	r3, [r7, #0]
 8005b24:	2600      	movs	r6, #0
 8005b26:	4630      	mov	r0, r6
 8005b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b2c:	4e2e      	ldr	r6, [pc, #184]	; (8005be8 <_malloc_r+0xe4>)
 8005b2e:	f000 f89d 	bl	8005c6c <__malloc_lock>
 8005b32:	6833      	ldr	r3, [r6, #0]
 8005b34:	461c      	mov	r4, r3
 8005b36:	bb34      	cbnz	r4, 8005b86 <_malloc_r+0x82>
 8005b38:	4629      	mov	r1, r5
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	f7ff ffc2 	bl	8005ac4 <sbrk_aligned>
 8005b40:	1c43      	adds	r3, r0, #1
 8005b42:	4604      	mov	r4, r0
 8005b44:	d14d      	bne.n	8005be2 <_malloc_r+0xde>
 8005b46:	6834      	ldr	r4, [r6, #0]
 8005b48:	4626      	mov	r6, r4
 8005b4a:	2e00      	cmp	r6, #0
 8005b4c:	d140      	bne.n	8005bd0 <_malloc_r+0xcc>
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	4631      	mov	r1, r6
 8005b52:	4638      	mov	r0, r7
 8005b54:	eb04 0803 	add.w	r8, r4, r3
 8005b58:	f000 f878 	bl	8005c4c <_sbrk_r>
 8005b5c:	4580      	cmp	r8, r0
 8005b5e:	d13a      	bne.n	8005bd6 <_malloc_r+0xd2>
 8005b60:	6821      	ldr	r1, [r4, #0]
 8005b62:	3503      	adds	r5, #3
 8005b64:	1a6d      	subs	r5, r5, r1
 8005b66:	f025 0503 	bic.w	r5, r5, #3
 8005b6a:	3508      	adds	r5, #8
 8005b6c:	2d0c      	cmp	r5, #12
 8005b6e:	bf38      	it	cc
 8005b70:	250c      	movcc	r5, #12
 8005b72:	4629      	mov	r1, r5
 8005b74:	4638      	mov	r0, r7
 8005b76:	f7ff ffa5 	bl	8005ac4 <sbrk_aligned>
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	d02b      	beq.n	8005bd6 <_malloc_r+0xd2>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	442b      	add	r3, r5
 8005b82:	6023      	str	r3, [r4, #0]
 8005b84:	e00e      	b.n	8005ba4 <_malloc_r+0xa0>
 8005b86:	6822      	ldr	r2, [r4, #0]
 8005b88:	1b52      	subs	r2, r2, r5
 8005b8a:	d41e      	bmi.n	8005bca <_malloc_r+0xc6>
 8005b8c:	2a0b      	cmp	r2, #11
 8005b8e:	d916      	bls.n	8005bbe <_malloc_r+0xba>
 8005b90:	1961      	adds	r1, r4, r5
 8005b92:	42a3      	cmp	r3, r4
 8005b94:	6025      	str	r5, [r4, #0]
 8005b96:	bf18      	it	ne
 8005b98:	6059      	strne	r1, [r3, #4]
 8005b9a:	6863      	ldr	r3, [r4, #4]
 8005b9c:	bf08      	it	eq
 8005b9e:	6031      	streq	r1, [r6, #0]
 8005ba0:	5162      	str	r2, [r4, r5]
 8005ba2:	604b      	str	r3, [r1, #4]
 8005ba4:	4638      	mov	r0, r7
 8005ba6:	f104 060b 	add.w	r6, r4, #11
 8005baa:	f000 f865 	bl	8005c78 <__malloc_unlock>
 8005bae:	f026 0607 	bic.w	r6, r6, #7
 8005bb2:	1d23      	adds	r3, r4, #4
 8005bb4:	1af2      	subs	r2, r6, r3
 8005bb6:	d0b6      	beq.n	8005b26 <_malloc_r+0x22>
 8005bb8:	1b9b      	subs	r3, r3, r6
 8005bba:	50a3      	str	r3, [r4, r2]
 8005bbc:	e7b3      	b.n	8005b26 <_malloc_r+0x22>
 8005bbe:	6862      	ldr	r2, [r4, #4]
 8005bc0:	42a3      	cmp	r3, r4
 8005bc2:	bf0c      	ite	eq
 8005bc4:	6032      	streq	r2, [r6, #0]
 8005bc6:	605a      	strne	r2, [r3, #4]
 8005bc8:	e7ec      	b.n	8005ba4 <_malloc_r+0xa0>
 8005bca:	4623      	mov	r3, r4
 8005bcc:	6864      	ldr	r4, [r4, #4]
 8005bce:	e7b2      	b.n	8005b36 <_malloc_r+0x32>
 8005bd0:	4634      	mov	r4, r6
 8005bd2:	6876      	ldr	r6, [r6, #4]
 8005bd4:	e7b9      	b.n	8005b4a <_malloc_r+0x46>
 8005bd6:	230c      	movs	r3, #12
 8005bd8:	603b      	str	r3, [r7, #0]
 8005bda:	4638      	mov	r0, r7
 8005bdc:	f000 f84c 	bl	8005c78 <__malloc_unlock>
 8005be0:	e7a1      	b.n	8005b26 <_malloc_r+0x22>
 8005be2:	6025      	str	r5, [r4, #0]
 8005be4:	e7de      	b.n	8005ba4 <_malloc_r+0xa0>
 8005be6:	bf00      	nop
 8005be8:	20000248 	.word	0x20000248

08005bec <_realloc_r>:
 8005bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf0:	4680      	mov	r8, r0
 8005bf2:	4614      	mov	r4, r2
 8005bf4:	460e      	mov	r6, r1
 8005bf6:	b921      	cbnz	r1, 8005c02 <_realloc_r+0x16>
 8005bf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	f7ff bf81 	b.w	8005b04 <_malloc_r>
 8005c02:	b92a      	cbnz	r2, 8005c10 <_realloc_r+0x24>
 8005c04:	f7ff ff12 	bl	8005a2c <_free_r>
 8005c08:	4625      	mov	r5, r4
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c10:	f000 f838 	bl	8005c84 <_malloc_usable_size_r>
 8005c14:	4284      	cmp	r4, r0
 8005c16:	4607      	mov	r7, r0
 8005c18:	d802      	bhi.n	8005c20 <_realloc_r+0x34>
 8005c1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c1e:	d812      	bhi.n	8005c46 <_realloc_r+0x5a>
 8005c20:	4621      	mov	r1, r4
 8005c22:	4640      	mov	r0, r8
 8005c24:	f7ff ff6e 	bl	8005b04 <_malloc_r>
 8005c28:	4605      	mov	r5, r0
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	d0ed      	beq.n	8005c0a <_realloc_r+0x1e>
 8005c2e:	42bc      	cmp	r4, r7
 8005c30:	4622      	mov	r2, r4
 8005c32:	4631      	mov	r1, r6
 8005c34:	bf28      	it	cs
 8005c36:	463a      	movcs	r2, r7
 8005c38:	f7ff fed0 	bl	80059dc <memcpy>
 8005c3c:	4631      	mov	r1, r6
 8005c3e:	4640      	mov	r0, r8
 8005c40:	f7ff fef4 	bl	8005a2c <_free_r>
 8005c44:	e7e1      	b.n	8005c0a <_realloc_r+0x1e>
 8005c46:	4635      	mov	r5, r6
 8005c48:	e7df      	b.n	8005c0a <_realloc_r+0x1e>
	...

08005c4c <_sbrk_r>:
 8005c4c:	b538      	push	{r3, r4, r5, lr}
 8005c4e:	4d06      	ldr	r5, [pc, #24]	; (8005c68 <_sbrk_r+0x1c>)
 8005c50:	2300      	movs	r3, #0
 8005c52:	4604      	mov	r4, r0
 8005c54:	4608      	mov	r0, r1
 8005c56:	602b      	str	r3, [r5, #0]
 8005c58:	f7fb ffa2 	bl	8001ba0 <_sbrk>
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	d102      	bne.n	8005c66 <_sbrk_r+0x1a>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	b103      	cbz	r3, 8005c66 <_sbrk_r+0x1a>
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	bd38      	pop	{r3, r4, r5, pc}
 8005c68:	20000250 	.word	0x20000250

08005c6c <__malloc_lock>:
 8005c6c:	4801      	ldr	r0, [pc, #4]	; (8005c74 <__malloc_lock+0x8>)
 8005c6e:	f000 b811 	b.w	8005c94 <__retarget_lock_acquire_recursive>
 8005c72:	bf00      	nop
 8005c74:	20000254 	.word	0x20000254

08005c78 <__malloc_unlock>:
 8005c78:	4801      	ldr	r0, [pc, #4]	; (8005c80 <__malloc_unlock+0x8>)
 8005c7a:	f000 b80c 	b.w	8005c96 <__retarget_lock_release_recursive>
 8005c7e:	bf00      	nop
 8005c80:	20000254 	.word	0x20000254

08005c84 <_malloc_usable_size_r>:
 8005c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c88:	1f18      	subs	r0, r3, #4
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	bfbc      	itt	lt
 8005c8e:	580b      	ldrlt	r3, [r1, r0]
 8005c90:	18c0      	addlt	r0, r0, r3
 8005c92:	4770      	bx	lr

08005c94 <__retarget_lock_acquire_recursive>:
 8005c94:	4770      	bx	lr

08005c96 <__retarget_lock_release_recursive>:
 8005c96:	4770      	bx	lr

08005c98 <_init>:
 8005c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9a:	bf00      	nop
 8005c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c9e:	bc08      	pop	{r3}
 8005ca0:	469e      	mov	lr, r3
 8005ca2:	4770      	bx	lr

08005ca4 <_fini>:
 8005ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca6:	bf00      	nop
 8005ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005caa:	bc08      	pop	{r3}
 8005cac:	469e      	mov	lr, r3
 8005cae:	4770      	bx	lr
